package com.bayer.ipms.model.views.ltc;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.ltc.common.LtcTagViewRow;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.adf.share.ADFContext;
import oracle.adf.share.security.SecurityContext;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 08 12:41:23 EEST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LtcTagViewRowImpl extends IPMSViewRowImpl implements LtcTagViewRow {


    public static final int ENTITY_LTCTAG = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getId();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Name {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getName();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        StartYear {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getStartYear();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setStartYear((Integer) value);
            }
        }
        ,
        IsFrozen {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getIsFrozen();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setIsFrozen((Boolean) value);
            }
        }
        ,
        IsForecastProb {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getIsForecastProb();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setIsForecastProb((Boolean) value);
            }
        }
        ,
        SubmitReportDate {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getSubmitReportDate();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setSubmitReportDate((Date) value);
            }
        }
        ,
        PrefilFromProfitDate {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getPrefilFromProfitDate();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CalculateProbDate {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getCalculateProbDate();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreateDate {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getCreateDate();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setCreateDate((Date) value);
            }
        }
        ,
        FcNumbver {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getFcNumbver();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ParentId {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getParentId();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setParentId((BigDecimal) value);
            }
        }
        ,
        ForecastVersion {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getForecastVersion();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ForecastNumber {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getForecastNumber();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        NumberOfProfitYears {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getNumberOfProfitYears();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setNumberOfProfitYears((BigDecimal) value);
            }
        }
        ,
        QualifiedName {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getQualifiedName();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        NextYear {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getNextYear();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcProcessView {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getLtcProcessView();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcTagView {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getLtcTagView();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SharedAppModule_LtcProfitPeriod {
            public Object get(LtcTagViewRowImpl obj) {
                return obj.getSharedAppModule_LtcProfitPeriod();
            }

            public void put(LtcTagViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(LtcTagViewRowImpl object);

        public abstract void put(LtcTagViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int STARTYEAR = AttributesEnum.StartYear.index();
    public static final int ISFROZEN = AttributesEnum.IsFrozen.index();
    public static final int ISFORECASTPROB = AttributesEnum.IsForecastProb.index();
    public static final int SUBMITREPORTDATE = AttributesEnum.SubmitReportDate.index();
    public static final int PREFILFROMPROFITDATE = AttributesEnum.PrefilFromProfitDate.index();
    public static final int CALCULATEPROBDATE = AttributesEnum.CalculateProbDate.index();
    public static final int CREATEDATE = AttributesEnum.CreateDate.index();
    public static final int FCNUMBVER = AttributesEnum.FcNumbver.index();
    public static final int PARENTID = AttributesEnum.ParentId.index();
    public static final int FORECASTVERSION = AttributesEnum.ForecastVersion.index();
    public static final int FORECASTNUMBER = AttributesEnum.ForecastNumber.index();
    public static final int NUMBEROFPROFITYEARS = AttributesEnum.NumberOfProfitYears.index();
    public static final int QUALIFIEDNAME = AttributesEnum.QualifiedName.index();
    public static final int NEXTYEAR = AttributesEnum.NextYear.index();
    public static final int LTCPROCESSVIEW = AttributesEnum.LtcProcessView.index();
    public static final int LTCTAGVIEW = AttributesEnum.LtcTagView.index();
    public static final int SHAREDAPPMODULE_LTCPROFITPERIOD = AttributesEnum.SharedAppModule_LtcProfitPeriod.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LtcTagViewRowImpl() {
    }

    /**
     * Gets LtcTag entity object.
     * @return the LtcTag
     */
    public IPMSEntityImpl getLtcTag() {
        return (IPMSEntityImpl) getEntity(ENTITY_LTCTAG);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for START_YEAR using the alias name StartYear.
     * @return the START_YEAR
     */
    public Integer getStartYear() {
        return (Integer) getAttributeInternal(STARTYEAR);
    }

    /**
     * Sets <code>value</code> as attribute value for START_YEAR using the alias name StartYear.
     * @param value value to set the START_YEAR
     */
    public void setStartYear(Integer value) {
        setAttributeInternal(STARTYEAR, value);
    }

    /**
     * Gets the attribute value for IS_FROZEN using the alias name IsFrozen.
     * @return the IS_FROZEN
     */
    public Boolean getIsFrozen() {
        return (Boolean) getAttributeInternal(ISFROZEN);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_FROZEN using the alias name IsFrozen.
     * @param value value to set the IS_FROZEN
     */
    public void setIsFrozen(Boolean value) {
        setAttributeInternal(ISFROZEN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute QualifiedName.
     * @return the QualifiedName
     */
    public String getQualifiedName() {
        return (String) getAttributeInternal(QUALIFIEDNAME);
    }

    /**
     * Gets the attribute value for IS_FORECAST_PROB using the alias name IsForecastProb.
     * @return the IS_FORECAST_PROB
     */
    public Boolean getIsForecastProb() {
        return (Boolean) getAttributeInternal(ISFORECASTPROB);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_FORECAST_PROB using the alias name IsForecastProb.
     * @param value value to set the IS_FORECAST_PROB
     */
    public void setIsForecastProb(Boolean value) {
        setAttributeInternal(ISFORECASTPROB, value);
    }

    /**
     * Gets the attribute value for SUBMIT_REPORT_DATE using the alias name SubmitReportDate.
     * @return the SUBMIT_REPORT_DATE
     */
    public Date getSubmitReportDate() {
        return (Date) getAttributeInternal(SUBMITREPORTDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for SUBMIT_REPORT_DATE using the alias name SubmitReportDate.
     * @param value value to set the SUBMIT_REPORT_DATE
     */
    public void setSubmitReportDate(Date value) {
        setAttributeInternal(SUBMITREPORTDATE, value);
    }

    /**
     * Gets the attribute value for PREFIL_FROM_PROFIT_DATE using the alias name PrefilFromProfitDate.
     * @return the PREFIL_FROM_PROFIT_DATE
     */
    public Date getPrefilFromProfitDate() {
        return (Date) getAttributeInternal(PREFILFROMPROFITDATE);
    }

    /**
     * Gets the attribute value for CALCULATE_PROB_DATE using the alias name CalculateProbDate.
     * @return the CALCULATE_PROB_DATE
     */
    public Date getCalculateProbDate() {
        return (Date) getAttributeInternal(CALCULATEPROBDATE);
    }

    /**
     * Gets the attribute value for CREATE_DATE using the alias name CreateDate.
     * @return the CREATE_DATE
     */
    public Date getCreateDate() {
        return (Date) getAttributeInternal(CREATEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATE_DATE using the alias name CreateDate.
     * @param value value to set the CREATE_DATE
     */
    public void setCreateDate(Date value) {
        setAttributeInternal(CREATEDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FcNumbver.
     * @return the FcNumbver
     */
    public String getFcNumbver() {
        return (String) getAttributeInternal(FCNUMBVER);
    }

    /**
     * Gets the attribute value for the calculated attribute NextYear.
     * @return the NextYear
     */
    public Integer getNextYear() {
        return (Integer) getAttributeInternal(NEXTYEAR);
    }

    /**
     * Gets the attribute value for NUMBER_OF_PROFIT_YEARS using the alias name NumberOfProfitYears.
     * @return the NUMBER_OF_PROFIT_YEARS
     */
    public BigDecimal getNumberOfProfitYears() {
        return (BigDecimal) getAttributeInternal(NUMBEROFPROFITYEARS);
    }

    /**
     * Sets <code>value</code> as attribute value for NUMBER_OF_PROFIT_YEARS using the alias name NumberOfProfitYears.
     * @param value value to set the NUMBER_OF_PROFIT_YEARS
     */
    public void setNumberOfProfitYears(BigDecimal value) {
        setAttributeInternal(NUMBEROFPROFITYEARS, value);
    }

    /**
     * Gets the attribute value for PARENT_ID using the alias name ParentId.
     * @return the PARENT_ID
     */
    public BigDecimal getParentId() {
        return (BigDecimal) getAttributeInternal(PARENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARENT_ID using the alias name ParentId.
     * @param value value to set the PARENT_ID
     */
    public void setParentId(BigDecimal value) {
        setAttributeInternal(PARENTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ForecastVersion.
     * @return the ForecastVersion
     */
    public BigDecimal getForecastVersion() {
        return (BigDecimal) getAttributeInternal(FORECASTVERSION);
    }

    /**
     * Gets the attribute value for the calculated attribute ForecastNumber.
     * @return the ForecastNumber
     */
    public BigDecimal getForecastNumber() {
        return (BigDecimal) getAttributeInternal(FORECASTNUMBER);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link LtcProcessView.
     */
    public RowIterator getLtcProcessView() {
        return (RowIterator) getAttributeInternal(LTCPROCESSVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LtcTagView.
     */
    public RowSet getLtcTagView() {
        return (RowSet) getAttributeInternal(LTCTAGVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> SharedAppModule_LtcProfitPeriod.
     */
    public RowSet getSharedAppModule_LtcProfitPeriod() {
        return (RowSet) getAttributeInternal(SHAREDAPPMODULE_LTCPROFITPERIOD);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    public void freeze() {
       SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
       String user = sctx.getUserName();         
       runStatement("begin ltc_fte_pkg.freeze(?,?); end;", true, user, getId().toString());      
    }
    
    public void unfreeze() {
       SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
       String user = sctx.getUserName();         
       runStatement("begin ltc_fte_pkg.unfreeze(?,?); end;", true, user, getId().toString());      
    }    
    
    public void calcProb() {
       SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
       String user = sctx.getUserName();         
       runStatement("begin ltc_fte_pkg.calc_prob(?,?); end;", true, user, getId().toString());      
    }      
    
    public void submit() {
       SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
       String user = sctx.getUserName();         
       runStatement("begin ltc_fte_pkg.submit_report(?,?); end;", true, user, getId().toString());      
    }     
    
    public void prefill() {        
       runStatement("begin ltc_sheet_pkg.prefill_all(?); end;", true, getId().toString());      
    }        
        
}

