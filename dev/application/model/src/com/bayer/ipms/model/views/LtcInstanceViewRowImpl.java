package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.common.LtcInstanceViewRow;

import java.math.BigDecimal;

import java.sql.Clob;
import java.sql.Date;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Apr 27 18:00:32 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LtcInstanceViewRowImpl extends IPMSViewRowImpl implements LtcInstanceViewRow {
    public static final int ENTITY_LTCINSTANCE = 0;
    public static final int ENTITY_IMPORTSTATUS = 1;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getId();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProjectId {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getProjectId();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SandboxId {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getSandboxId();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setSandboxId((String) value);
            }
        }
        ,
        StatusCode {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getStatusCode();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setStatusCode((String) value);
            }
        }
        ,
        IsSyncing {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getIsSyncing();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setIsSyncing((Boolean) value);
            }
        }
        ,
        CreateDate {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getCreateDate();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StatusName {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getStatusName();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setStatusName((String) value);
            }
        }
        ,
        StatusCode2 {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getStatusCode2();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setStatusCode2((String) value);
            }
        }
        ,
        ExcelReport {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getExcelReport();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setExcelReport((Clob) value);
            }
        }
        ,
        IsReportGenerated {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getIsReportGenerated();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StageNumber {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getStageNumber();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setStageNumber((Integer) value);
            }
        }
        ,
        LtcPlan {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getLtcPlan();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ImportStatusView1 {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getImportStatusView1();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcReportView {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getLtcReportView();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ImportStatusView {
            public Object get(LtcInstanceViewRowImpl obj) {
                return obj.getImportStatusView();
            }

            public void put(LtcInstanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(LtcInstanceViewRowImpl object);

        public abstract void put(LtcInstanceViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int SANDBOXID = AttributesEnum.SandboxId.index();
    public static final int STATUSCODE = AttributesEnum.StatusCode.index();
    public static final int ISSYNCING = AttributesEnum.IsSyncing.index();
    public static final int CREATEDATE = AttributesEnum.CreateDate.index();
    public static final int STATUSNAME = AttributesEnum.StatusName.index();
    public static final int STATUSCODE2 = AttributesEnum.StatusCode2.index();
    public static final int EXCELREPORT = AttributesEnum.ExcelReport.index();
    public static final int ISREPORTGENERATED = AttributesEnum.IsReportGenerated.index();
    public static final int STAGENUMBER = AttributesEnum.StageNumber.index();
    public static final int LTCPLAN = AttributesEnum.LtcPlan.index();
    public static final int IMPORTSTATUSVIEW1 = AttributesEnum.ImportStatusView1.index();
    public static final int LTCREPORTVIEW = AttributesEnum.LtcReportView.index();
    public static final int IMPORTSTATUSVIEW = AttributesEnum.ImportStatusView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LtcInstanceViewRowImpl() {
    }

    /**
     * Gets LtcInstance entity object.
     * @return the LtcInstance
     */
    public IPMSEntityImpl getLtcInstance() {
        return (IPMSEntityImpl)getEntity(0);
    }

    /**
     * Gets ImportStatus entity object.
     * @return the ImportStatus
     */
    public IPMSEntityImpl getImportStatus() {
        return (IPMSEntityImpl)getEntity(1);
    }

    /**
     * Gets the attribute value for CREATE_DATE using the alias name CreateDate.
     * @return the CREATE_DATE
     */
    public Date getCreateDate() {
        return (Date)getAttributeInternal(CREATEDATE);
    }


    /**
     * Gets the attribute value for NAME using the alias name StatusName.
     * @return the NAME
     */
    public String getStatusName() {
        return (String) getAttributeInternal(STATUSNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name StatusName.
     * @param value value to set the NAME
     */
    public void setStatusName(String value) {
        setAttributeInternal(STATUSNAME, value);
    }


    /**
     * Gets the attribute value for CODE using the alias name StatusCode2.
     * @return the CODE
     */
    public String getStatusCode2() {
        return (String) getAttributeInternal(STATUSCODE2);
    }

    /**
     * Sets <code>value</code> as attribute value for CODE using the alias name StatusCode2.
     * @param value value to set the CODE
     */
    public void setStatusCode2(String value) {
        setAttributeInternal(STATUSCODE2, value);
    }

    /**
     * Gets the attribute value for EXCEL_REPORT using the alias name ExcelReport.
     * @return the EXCEL_REPORT
     */
    public Clob getExcelReport() {
        return (Clob) getAttributeInternal(EXCELREPORT);
    }

    /**
     * Sets <code>value</code> as attribute value for EXCEL_REPORT using the alias name ExcelReport.
     * @param value value to set the EXCEL_REPORT
     */
    public void setExcelReport(Clob value) {
        setAttributeInternal(EXCELREPORT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IsReportGenerated.
     * @return the IsReportGenerated
     */
    public String getIsReportGenerated() {
        return (String)getAttributeInternal(ISREPORTGENERATED);
    }

    /**
     * Gets the attribute value for STAGE_NUMBER using the alias name StageNumber.
     * @return the STAGE_NUMBER
     */
    public Integer getStageNumber() {
        return (Integer) getAttributeInternal(STAGENUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for STAGE_NUMBER using the alias name StageNumber.
     * @param value value to set the STAGE_NUMBER
     */
    public void setStageNumber(Integer value) {
        setAttributeInternal(STAGENUMBER, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public BigDecimal getId() {
        return (BigDecimal)getAttributeInternal(ID);
    }


    /**
     * Gets the attribute value for IS_SYNCING using the alias name IsSyncing.
     * @return the IS_SYNCING
     */
    public Boolean getIsSyncing() {
        return (Boolean)getAttributeInternal(ISSYNCING);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_SYNCING using the alias name IsSyncing.
     * @param value value to set the IS_SYNCING
     */
    public void setIsSyncing(Boolean value) {
        setAttributeInternal(ISSYNCING, value);
    }

    /**
     * Gets the attribute value for PROJECT_ID using the alias name ProjectId.
     * @return the PROJECT_ID
     */
    public String getProjectId() {
        return (String)getAttributeInternal(PROJECTID);
    }


    /**
     * Gets the attribute value for SANDBOX_ID using the alias name SandboxId.
     * @return the SANDBOX_ID
     */
    public String getSandboxId() {
        return (String) getAttributeInternal(SANDBOXID);
    }

    /**
     * Sets <code>value</code> as attribute value for SANDBOX_ID using the alias name SandboxId.
     * @param value value to set the SANDBOX_ID
     */
    public void setSandboxId(String value) {
        setAttributeInternal(SANDBOXID, value);
    }

    /**
     * Gets the attribute value for STATUS_CODE using the alias name StatusCode.
     * @return the STATUS_CODE
     */
    public String getStatusCode() {
        return (String)getAttributeInternal(STATUSCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS_CODE using the alias name StatusCode.
     * @param value value to set the STATUS_CODE
     */
    public void setStatusCode(String value) {
        setAttributeInternal(STATUSCODE, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link LtcPlan.
     */
    public RowIterator getLtcPlan() {
        return (RowIterator)getAttributeInternal(LTCPLAN);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link ImportStatusView1.
     */
    public oracle.jbo.Row getImportStatusView1() {
        return (oracle.jbo.Row) getAttributeInternal(IMPORTSTATUSVIEW1);
    }

    /**
     * Sets the master-detail link ImportStatusView1 between this object and <code>value</code>.
     */
    public void setImportStatusView1(oracle.jbo.Row value) {
        setAttributeInternal(IMPORTSTATUSVIEW1, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link LtcReportView.
     */
    public RowIterator getLtcReportView() {
        return (RowIterator)getAttributeInternal(LTCREPORTVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ImportStatusView.
     */
    public RowSet getImportStatusView() {
        return (RowSet)getAttributeInternal(IMPORTSTATUSVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    public void launch() {
        runStatement("begin ltc_pkg.launch(?); end;", true, getId().toString());

        this.refresh();
    }

    public void submit() {
        runStatement("begin ltc_pkg.submit(?); end;", true, getId().toString());

        this.refresh();
    }

    public void recalculateTotals() {
        runStatement("begin ltc_pkg.refresh_totals(?); end;", true, getId().toString());

    }
    
    public void prefill() {
        runStatement("begin ltc_pkg.prefill(?); end;", true, getId().toString());

    }
    
    public void prefillProfit() {
        runStatement("begin ltc_pkg.prefill_profit(?); end;", true, getId().toString());

    }
}


