package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSViewRowImpl;
import com.bayer.ipms.model.views.common.ProjectViewRow;
import com.bayer.ipms.model.views.common.TaskViewRow;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.Calendar;

//import oracle.bpel.services.workflow.task.model.CommentType;
//import oracle.bpel.services.workflow.task.model.ObjectFactory;
//import oracle.bpel.services.workflow.task.model.Task;

import oracle.jbo.JboException;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 05 11:05:26 EET 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TaskViewRowImpl extends IPMSViewRowImpl implements TaskViewRow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        TaskNumber {
            public Object get(TaskViewRowImpl obj) {
                return obj.getTaskNumber();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setTaskNumber((Integer) value);
            }
        }
        ,
        Title {
            public Object get(TaskViewRowImpl obj) {
                return obj.getTitle();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setTitle((String) value);
            }
        }
        ,
        Priority {
            public Object get(TaskViewRowImpl obj) {
                return obj.getPriority();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setPriority((Integer) value);
            }
        }
        ,
        State {
            public Object get(TaskViewRowImpl obj) {
                return obj.getState();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setState((String) value);
            }
        }
        ,
        Outcome {
            public Object get(TaskViewRowImpl obj) {
                return obj.getOutcome();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setOutcome((String) value);
            }
        }
        ,
        Assignees {
            public Object get(TaskViewRowImpl obj) {
                return obj.getAssignees();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAssignees((String) value);
            }
        }
        ,
        CreatedDate {
            public Object get(TaskViewRowImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setCreatedDate((Date) value);
            }
        }
        ,
        ExpirationDate {
            public Object get(TaskViewRowImpl obj) {
                return obj.getExpirationDate();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setExpirationDate((Date) value);
            }
        }
        ,
        ProjectID {
            public Object get(TaskViewRowImpl obj) {
                return obj.getProjectID();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setProjectID((String) value);
            }
        }
        ,
        ProgramID {
            public Object get(TaskViewRowImpl obj) {
                return obj.getProgramID();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setProgramID((String) value);
            }
        }
        ,
        Comment {
            public Object get(TaskViewRowImpl obj) {
                return obj.getComment();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setComment((String) value);
            }
        }
        ,
        TaskDefinitionName {
            public Object get(TaskViewRowImpl obj) {
                return obj.getTaskDefinitionName();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setTaskDefinitionName((String) value);
            }
        }
        ,
        ProcessID {
            public Object get(TaskViewRowImpl obj) {
                return obj.getProcessID();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setProcessID((String) value);
            }
        }
        ,
        AssumptionRequestID {
            public Object get(TaskViewRowImpl obj) {
                return obj.getAssumptionRequestID();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAssumptionRequestID((String) value);
            }
        }
        ,
        TitleOrdering {
            public Object get(TaskViewRowImpl obj) {
                return obj.getTitleOrdering();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProjectView {
            public Object get(TaskViewRowImpl obj) {
                return obj.getProjectView();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProcessView {
            public Object get(TaskViewRowImpl obj) {
                return obj.getProcessView();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProgramView {
            public Object get(TaskViewRowImpl obj) {
                return obj.getProgramView();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PlanAssumptionRequestView {
            public Object get(TaskViewRowImpl obj) {
                return obj.getPlanAssumptionRequestView();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcProcessView {
            public Object get(TaskViewRowImpl obj) {
                return obj.getLtcProcessView();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcProjectView {
            public Object get(TaskViewRowImpl obj) {
                return obj.getLtcProjectView();
            }

            public void put(TaskViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;


        private static int firstIndex = 0;

        public abstract Object get(TaskViewRowImpl object);

        public abstract void put(TaskViewRowImpl object, Object value);

        public int index() {
            return TaskViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return TaskViewRowImpl.AttributesEnum.firstIndex() + TaskViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = TaskViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TASKNUMBER = AttributesEnum.TaskNumber.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int PRIORITY = AttributesEnum.Priority.index();
    public static final int STATE = AttributesEnum.State.index();
    public static final int OUTCOME = AttributesEnum.Outcome.index();
    public static final int ASSIGNEES = AttributesEnum.Assignees.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int EXPIRATIONDATE = AttributesEnum.ExpirationDate.index();
    public static final int PROJECTID = AttributesEnum.ProjectID.index();
    public static final int PROGRAMID = AttributesEnum.ProgramID.index();
    public static final int COMMENT = AttributesEnum.Comment.index();
    public static final int TASKDEFINITIONNAME = AttributesEnum.TaskDefinitionName.index();
    public static final int PROCESSID = AttributesEnum.ProcessID.index();
    public static final int ASSUMPTIONREQUESTID = AttributesEnum.AssumptionRequestID.index();
    public static final int TITLEORDERING = AttributesEnum.TitleOrdering.index();
    public static final int PROJECTVIEW = AttributesEnum.ProjectView.index();
    public static final int PROCESSVIEW = AttributesEnum.ProcessView.index();
    public static final int PROGRAMVIEW = AttributesEnum.ProgramView.index();
    public static final int PLANASSUMPTIONREQUESTVIEW = AttributesEnum.PlanAssumptionRequestView.index();
    public static final int LTCPROCESSVIEW = AttributesEnum.LtcProcessView.index();
    public static final int LTCPROJECTVIEW = AttributesEnum.LtcProjectView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TaskViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute TaskNumber.
     * @return the TaskNumber
     */
    public Integer getTaskNumber() {
        return (Integer)getAttributeInternal(TASKNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TaskNumber.
     * @param value value to set the  TaskNumber
     */
    public void setTaskNumber(Integer value) {
        setAttributeInternal(TASKNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Title.
     * @return the Title
     */
    public String getTitle() {
        return (String)getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Title.
     * @param value value to set the  Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Priority.
     * @return the Priority
     */
    public Integer getPriority() {
        return (Integer)getAttributeInternal(PRIORITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Priority.
     * @param value value to set the  Priority
     */
    public void setPriority(Integer value) {
        setAttributeInternal(PRIORITY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute State.
     * @return the State
     */
    public String getState() {
        return (String)getAttributeInternal(STATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute State.
     * @param value value to set the  State
     */
    public void setState(String value) {
        setAttributeInternal(STATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Outcome.
     * @return the Outcome
     */
    public String getOutcome() {
        return (String)getAttributeInternal(OUTCOME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Outcome.
     * @param value value to set the  Outcome
     */
    public void setOutcome(String value) {
        setAttributeInternal(OUTCOME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Assignees.
     * @return the Assignees
     */
    public String getAssignees() {
        return (String)getAttributeInternal(ASSIGNEES);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Assignees.
     * @param value value to set the  Assignees
     */
    public void setAssignees(String value) {
        setAttributeInternal(ASSIGNEES, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CreatedDate.
     * @param value value to set the  CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ExpirationDate.
     * @return the ExpirationDate
     */
    public Date getExpirationDate() {
        return (Date)getAttributeInternal(EXPIRATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ExpirationDate.
     * @param value value to set the  ExpirationDate
     */
    public void setExpirationDate(Date value) {
        setAttributeInternal(EXPIRATIONDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ProjectID.
     * @return the ProjectID
     */
    public String getProjectID() {
        return (String)getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ProjectID.
     * @param value value to set the  ProjectID
     */
    public void setProjectID(String value) {
        setAttributeInternal(PROJECTID, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ProgramID.
     * @return the ProgramID
     */
    public String getProgramID() {
        return (String)getAttributeInternal(PROGRAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ProgramID.
     * @param value value to set the  ProgramID
     */
    public void setProgramID(String value) {
        setAttributeInternal(PROGRAMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Comment.
     * @return the Comment
     */
    public String getComment() {
        return (String)getAttributeInternal(COMMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Comment.
     * @param value value to set the  Comment
     */
    public void setComment(String value) {
        setAttributeInternal(COMMENT, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TaskDefinitionName.
     * @return the TaskDefinitionName
     */
    public String getTaskDefinitionName() {
        return (String)getAttributeInternal(TASKDEFINITIONNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TaskDefinitionName.
     * @param value value to set the  TaskDefinitionName
     */
    public void setTaskDefinitionName(String value) {
        setAttributeInternal(TASKDEFINITIONNAME, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ProcessID.
     * @return the ProcessID
     */
    public String getProcessID() {
        return (String) getAttributeInternal(PROCESSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ProcessID.
     * @param value value to set the  ProcessID
     */
    public void setProcessID(String value) {
        setAttributeInternal(PROCESSID, value);
    }


  /**
   * Gets the attribute value for the calculated attribute AssumptionRequestID.
   * @return the AssumptionRequestID
   */
  public String getAssumptionRequestID() {
    return (String) getAttributeInternal(ASSUMPTIONREQUESTID);
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute AssumptionRequestID.
   * @param value value to set the  AssumptionRequestID
   */
  public void setAssumptionRequestID(String value) {
    setAttributeInternal(ASSUMPTIONREQUESTID, value);
  }

    /**
     * Gets the attribute value for the calculated attribute TitleOrdering.
     * @return the TitleOrdering
     */
    public String getTitleOrdering() {
        return (String) getAttributeInternal(TITLEORDERING);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link ProjectView.
     */
    public oracle.jbo.Row getProjectView() {
        return (oracle.jbo.Row) getAttributeInternal(PROJECTVIEW);
    }

    /**
     * Sets the master-detail link ProjectView between this object and <code>value</code>.
     */
    public void setProjectView(oracle.jbo.Row value) {
        setAttributeInternal(PROJECTVIEW, value);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link ProcessView.
     */
    public oracle.jbo.Row getProcessView() {
        return (oracle.jbo.Row) getAttributeInternal(PROCESSVIEW);
    }

    /**
     * Sets the master-detail link ProcessView between this object and <code>value</code>.
     */
    public void setProcessView(oracle.jbo.Row value) {
        setAttributeInternal(PROCESSVIEW, value);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link ProgramView.
     */
    public oracle.jbo.Row getProgramView() {
        return (oracle.jbo.Row) getAttributeInternal(PROGRAMVIEW);
    }

    /**
     * Sets the master-detail link ProgramView between this object and <code>value</code>.
     */
    public void setProgramView(oracle.jbo.Row value) {
        setAttributeInternal(PROGRAMVIEW, value);
    }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PlanAssumptionRequestView.
   */
  public RowIterator getPlanAssumptionRequestView() {
    return (RowIterator)getAttributeInternal(PLANASSUMPTIONREQUESTVIEW);
  }


    /**
     * Gets the associated <code>Row</code> using master-detail link LtcProcessView.
     */
    public Row getLtcProcessView() {
        return (Row) getAttributeInternal(LTCPROCESSVIEW);
    }

    /**
     * Sets the master-detail link LtcProcessView between this object and <code>value</code>.
     */
    public void setLtcProcessView(Row value) {
        setAttributeInternal(LTCPROCESSVIEW, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link LtcProjectView.
     */
    public Row getLtcProjectView() {
        return (Row) getAttributeInternal(LTCPROJECTVIEW);
    }

    /**
     * Sets the master-detail link LtcProjectView between this object and <code>value</code>.
     */
    public void setLtcProjectView(Row value) {
        setAttributeInternal(LTCPROJECTVIEW, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * Approves this task.
     */
    public void approve() {
        // Invokes view object's method, because view object class has methods for accessing task query services.
        ((TaskViewImpl)this.getViewObject()).setTaskOutcome(this, "APPROVE");
    }

    /**
     * Submits this task.
     */
    public void submit() {
        // Invokes view object's method, because view object class has methods for accessing task query services.
        ((TaskViewImpl)this.getViewObject()).setTaskOutcome(this, "SUBMIT");
    }

    /**
     * Rejects this task.
     */
    public void reject() {
        // Invokes view object's method, because view object class has methods for accessing task query services.
        ((TaskViewImpl)this.getViewObject()).setTaskOutcome(this, "REJECT");
    }
    
    public Element updatePayload(Element payload) {
        if ("AssignProjectID".equals(getTaskDefinitionName())) {
                NodeList projectNodes = payload.getElementsByTagName("project");
                for (int i = 0; i < projectNodes.getLength(); i++) {
                    Node projectNode = projectNodes.item(i);
                    if (projectNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element projectElement = (Element)projectNode;
        
                        if (projectElement.getElementsByTagName("code").getLength() > 0) {
                            projectElement.getElementsByTagName("code").item(0).setTextContent(((ProjectViewRow)getProjectView()).getCode());
                        }
                        else {
                            Element newNode = projectElement.getOwnerDocument().createElementNS(projectElement.getNamespaceURI(), "code");
                            newNode.setTextContent(((ProjectViewRow)getProjectView()).getCode());
                            
                            NodeList projectSubs = projectElement.getChildNodes();
                            if (projectSubs.getLength() == 0) {
                                projectElement.appendChild(newNode);
                            } else {
                                projectElement.insertBefore(newNode, projectSubs.item(0));
                            }
                        }
                    }
                 }
        }

        return payload;
    }

}
