package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.common.ProjectView2Row;

import java.sql.Clob;
import java.sql.Date;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 08 15:52:29 EEST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectView2RowImpl extends IPMSViewRowImpl implements ProjectView2Row {


    public static final int ENTITY_PROJECT = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getId();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SuccProjectQualifiedName {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getSuccProjectQualifiedName();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PredProjectQualifiedName {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getPredProjectQualifiedName();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PtrForD3Code {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getPtrForD3Code();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setPtrForD3Code((String) value);
            }
        }
        ,
        LastImportDate {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getLastImportDate();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UpdateDate {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getUpdateDate();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MedicalDeviceSpec {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getMedicalDeviceSpec();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setMedicalDeviceSpec((String) value);
            }
        }
        ,
        PtrComment {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getPtrComment();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setPtrComment((String) value);
            }
        }
        ,
        ProjectView {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getProjectView();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PhaseTransitionD3 {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getPhaseTransitionD3();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PhaseTransitionView {
            public Object get(ProjectView2RowImpl obj) {
                return obj.getPhaseTransitionView();
            }

            public void put(ProjectView2RowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(ProjectView2RowImpl object);

        public abstract void put(ProjectView2RowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int SUCCPROJECTQUALIFIEDNAME = AttributesEnum.SuccProjectQualifiedName.index();
    public static final int PREDPROJECTQUALIFIEDNAME = AttributesEnum.PredProjectQualifiedName.index();
    public static final int PTRFORD3CODE = AttributesEnum.PtrForD3Code.index();
    public static final int LASTIMPORTDATE = AttributesEnum.LastImportDate.index();
    public static final int UPDATEDATE = AttributesEnum.UpdateDate.index();
    public static final int MEDICALDEVICESPEC = AttributesEnum.MedicalDeviceSpec.index();
    public static final int PTRCOMMENT = AttributesEnum.PtrComment.index();
    public static final int PROJECTVIEW = AttributesEnum.ProjectView.index();
    public static final int PHASETRANSITIOND3 = AttributesEnum.PhaseTransitionD3.index();
    public static final int PHASETRANSITIONVIEW = AttributesEnum.PhaseTransitionView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectView2RowImpl() {
    }

    /**
     * Gets Project entity object.
     * @return the Project
     */
    public IPMSEntityImpl getProject() {
        return (IPMSEntityImpl) getEntity(ENTITY_PROJECT);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Gets the attribute value for the calculated attribute SuccProjectQualifiedName.
     * @return the SuccProjectQualifiedName
     */
    public String getSuccProjectQualifiedName() {
        return (String) getAttributeInternal(SUCCPROJECTQUALIFIEDNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute PredProjectQualifiedName.
     * @return the PredProjectQualifiedName
     */
    public String getPredProjectQualifiedName() {
        return (String) getAttributeInternal(PREDPROJECTQUALIFIEDNAME);
    }

    /**
     * Gets the attribute value for PTR_FOR_D3_CODE using the alias name PtrForD3Code.
     * @return the PTR_FOR_D3_CODE
     */
    public String getPtrForD3Code() {
        return (String) getAttributeInternal(PTRFORD3CODE);
    }

    /**
     * Sets <code>value</code> as attribute value for PTR_FOR_D3_CODE using the alias name PtrForD3Code.
     * @param value value to set the PTR_FOR_D3_CODE
     */
    public void setPtrForD3Code(String value) {
        setAttributeInternal(PTRFORD3CODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LastImportDate.
     * @return the LastImportDate
     */
    public Date getLastImportDate() {
        return (Date) getAttributeInternal(LASTIMPORTDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute UpdateDate.
     * @return the UpdateDate
     */
    public Date getUpdateDate() {
        return (Date) getAttributeInternal(UPDATEDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute MedicalDeviceSpec.
     * @return the MedicalDeviceSpec
     */
    public String getMedicalDeviceSpec() {
        return (String) getAttributeInternal(MEDICALDEVICESPEC);
    }

    /**
     * Sets <code>value</code> as attribute value for MEDICAL_DEVICE_SPEC using the alias name MedicalDeviceSpec.
     * @param value value to set the MEDICAL_DEVICE_SPEC
     */
    public void setMedicalDeviceSpec(String value) {
        setAttributeInternal(MEDICALDEVICESPEC, value);
    }

    /**
     * Gets the attribute value for PTR_COMMENT using the alias name PtrComment.
     * @return the PTR_COMMENT
     */
    public String getPtrComment() {
        return (String) getAttributeInternal(PTRCOMMENT);
    }

    /**
     * Sets <code>value</code> as attribute value for PTR_COMMENT using the alias name PtrComment.
     * @param value value to set the PTR_COMMENT
     */
    public void setPtrComment(String value) {
        setAttributeInternal(PTRCOMMENT, value);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link ProjectView.
     */
    public Row getProjectView() {
        return (Row) getAttributeInternal(PROJECTVIEW);
    }

    /**
     * Sets the master-detail link ProjectView between this object and <code>value</code>.
     */
    public void setProjectView(Row value) {
        setAttributeInternal(PROJECTVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PhaseTransitionD3.
     */
    public RowSet getPhaseTransitionD3() {
        return (RowSet) getAttributeInternal(PHASETRANSITIOND3);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PhaseTransitionView.
     */
    public RowSet getPhaseTransitionView() {
        return (RowSet) getAttributeInternal(PHASETRANSITIONVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

