package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.common.TppProfileSubcategoryViewRow;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 29 17:41:53 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TppProfileSubcategoryViewRowImpl extends IPMSViewRowImpl implements TppProfileSubcategoryViewRow {
    public static final int ENTITY_TARGETPRODUCTPROFILE = 0;
    public static final int ENTITY_TPPSUBCATEGORY = 1;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TppId {
            public Object get(TppProfileSubcategoryViewRowImpl obj) {
                return obj.getTppId();
            }

            public void put(TppProfileSubcategoryViewRowImpl obj, Object value) {
                obj.setTppId((String) value);
            }
        }
        ,
        Code {
            public Object get(TppProfileSubcategoryViewRowImpl obj) {
                return obj.getCode();
            }

            public void put(TppProfileSubcategoryViewRowImpl obj, Object value) {
                obj.setCode((String) value);
            }
        }
        ,
        CategoryCode {
            public Object get(TppProfileSubcategoryViewRowImpl obj) {
                return obj.getCategoryCode();
            }

            public void put(TppProfileSubcategoryViewRowImpl obj, Object value) {
                obj.setCategoryCode((String) value);
            }
        }
        ,
        IsActive {
            public Object get(TppProfileSubcategoryViewRowImpl obj) {
                return obj.getIsActive();
            }

            public void put(TppProfileSubcategoryViewRowImpl obj, Object value) {
                obj.setIsActive((Boolean) value);
            }
        }
        ,
        Name {
            public Object get(TppProfileSubcategoryViewRowImpl obj) {
                return obj.getName();
            }

            public void put(TppProfileSubcategoryViewRowImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        TppValuesView {
            public Object get(TppProfileSubcategoryViewRowImpl obj) {
                return obj.getTppValuesView();
            }

            public void put(TppProfileSubcategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(TppProfileSubcategoryViewRowImpl object);

        public abstract void put(TppProfileSubcategoryViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TPPID = AttributesEnum.TppId.index();
    public static final int CODE = AttributesEnum.Code.index();
    public static final int CATEGORYCODE = AttributesEnum.CategoryCode.index();
    public static final int ISACTIVE = AttributesEnum.IsActive.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int TPPVALUESVIEW = AttributesEnum.TppValuesView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TppProfileSubcategoryViewRowImpl() {
    }

    /**
     * Gets TargetProductProfile entity object.
     * @return the TargetProductProfile
     */
    public IPMSEntityImpl getTargetProductProfile() {
        return (IPMSEntityImpl) getEntity(ENTITY_TARGETPRODUCTPROFILE);
    }

    /**
     * Gets TppSubcategory entity object.
     * @return the TppSubcategory
     */
    public IPMSEntityImpl getTppSubcategory() {
        return (IPMSEntityImpl) getEntity(ENTITY_TPPSUBCATEGORY);
    }

    /**
     * Gets the attribute value for ID using the alias name TppId.
     * @return the ID
     */
    public String getTppId() {
        return (String) getAttributeInternal(TPPID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name TppId.
     * @param value value to set the ID
     */
    public void setTppId(String value) {
        setAttributeInternal(TPPID, value);
    }

    /**
     * Gets the attribute value for CODE using the alias name Code.
     * @return the CODE
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as attribute value for CODE using the alias name Code.
     * @param value value to set the CODE
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for CATEGORY_CODE using the alias name CategoryCode.
     * @return the CATEGORY_CODE
     */
    public String getCategoryCode() {
        return (String) getAttributeInternal(CATEGORYCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for CATEGORY_CODE using the alias name CategoryCode.
     * @param value value to set the CATEGORY_CODE
     */
    public void setCategoryCode(String value) {
        setAttributeInternal(CATEGORYCODE, value);
    }

    /**
     * Gets the attribute value for IS_ACTIVE using the alias name IsActive.
     * @return the IS_ACTIVE
     */
    public Boolean getIsActive() {
        return (Boolean) getAttributeInternal(ISACTIVE);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_ACTIVE using the alias name IsActive.
     * @param value value to set the IS_ACTIVE
     */
    public void setIsActive(Boolean value) {
        setAttributeInternal(ISACTIVE, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link TppValuesView.
     */
    public RowIterator getTppValuesView() {
        return (RowIterator) getAttributeInternal(TPPVALUESVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

