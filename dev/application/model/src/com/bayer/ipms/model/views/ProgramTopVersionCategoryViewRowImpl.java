package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import java.math.BigDecimal;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 07 15:17:17 EEST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProgramTopVersionCategoryViewRowImpl extends IPMSViewRowImpl {
    public static final int ENTITY_PROGRAMTOPVERSION = 0;
    public static final int ENTITY_PROGRAMTOPCATEGORY = 1;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        VersionId {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getVersionId();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VersionName {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getVersionName();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setVersionName((String) value);
            }
        }
        ,
        Version {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getVersion();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setVersion((String) value);
            }
        }
        ,
        CategoryCode {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getCategoryCode();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        IsActive {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getIsActive();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Name {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getName();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CategoryDescription {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getCategoryDescription();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        IsIndication {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getIsIndication();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setIsIndication((Boolean) value);
            }
        }
        ,
        ProgramTopVersionSubCategoryView {
            public Object get(ProgramTopVersionCategoryViewRowImpl obj) {
                return obj.getProgramTopVersionSubCategoryView();
            }

            public void put(ProgramTopVersionCategoryViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(ProgramTopVersionCategoryViewRowImpl object);

        public abstract void put(ProgramTopVersionCategoryViewRowImpl object, Object value);

        public int index() {
            return ProgramTopVersionCategoryViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return ProgramTopVersionCategoryViewRowImpl.AttributesEnum.firstIndex() +
                   ProgramTopVersionCategoryViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = ProgramTopVersionCategoryViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int VERSIONID = AttributesEnum.VersionId.index();
    public static final int VERSIONNAME = AttributesEnum.VersionName.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int CATEGORYCODE = AttributesEnum.CategoryCode.index();
    public static final int ISACTIVE = AttributesEnum.IsActive.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int CATEGORYDESCRIPTION = AttributesEnum.CategoryDescription.index();
    public static final int ISINDICATION = AttributesEnum.IsIndication.index();
    public static final int PROGRAMTOPVERSIONSUBCATEGORYVIEW = AttributesEnum.ProgramTopVersionSubCategoryView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProgramTopVersionCategoryViewRowImpl() {
    }

    /**
     * Gets ProgramTopVersion entity object.
     * @return the ProgramTopVersion
     */
    public IPMSEntityImpl getProgramTopVersion() {
        return (IPMSEntityImpl) getEntity(ENTITY_PROGRAMTOPVERSION);
    }

    /**
     * Gets ProgramTopCategory entity object.
     * @return the ProgramTopCategory
     */
    public IPMSEntityImpl getProgramTopCategory() {
        return (IPMSEntityImpl) getEntity(ENTITY_PROGRAMTOPCATEGORY);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public BigDecimal getVersionId() {
        return (BigDecimal) getAttributeInternal(VERSIONID);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getVersionName() {
        return (String) getAttributeInternal(VERSIONNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setVersionName(String value) {
        setAttributeInternal(VERSIONNAME, value);
    }

    /**
     * Gets the attribute value for VERSION using the alias name Version.
     * @return the VERSION
     */
    public String getVersion() {
        return (String) getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for VERSION using the alias name Version.
     * @param value value to set the VERSION
     */
    public void setVersion(String value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for CODE using the alias name CategoryCode.
     * @return the CODE
     */
    public String getCategoryCode() {
        return (String) getAttributeInternal(CATEGORYCODE);
    }

    /**
     * Gets the attribute value for IS_ACTIVE using the alias name IsActive.
     * @return the IS_ACTIVE
     */
    public Boolean getIsActive() {
        return (Boolean) getAttributeInternal(ISACTIVE);
    }

    /**
     * Gets the attribute value for NAME using the alias name CategoryName.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name CategoryDescription.
     * @return the DESCRIPTION
     */
    public String getCategoryDescription() {
        return (String) getAttributeInternal(CATEGORYDESCRIPTION);
    }

    /**
     * Gets the attribute value for IS_INDICATION using the alias name IsIndication.
     * @return the IS_INDICATION
     */
    public Boolean getIsIndication() {
        return (Boolean) getAttributeInternal(ISINDICATION);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_INDICATION using the alias name IsIndication.
     * @param value value to set the IS_INDICATION
     */
    public void setIsIndication(Boolean value) {
        setAttributeInternal(ISINDICATION, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link ProgramTopVersionSubCategoryView.
     */
    public RowIterator getProgramTopVersionSubCategoryView() {
        return (RowIterator) getAttributeInternal(PROGRAMTOPVERSIONSUBCATEGORYVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

