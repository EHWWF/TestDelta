package com.bayer.ipms.model.views.lookups;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;
import com.bayer.ipms.model.views.lookups.common.ConfigurationViewRow;

import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 14 12:41:46 EET 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConfigurationViewRowImpl extends IPMSViewRowImpl implements ConfigurationViewRow {


    public static final int ENTITY_CONFIGURATION = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Code {
            public Object get(ConfigurationViewRowImpl obj) {
                return obj.getCode();
            }

            public void put(ConfigurationViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Name {
            public Object get(ConfigurationViewRowImpl obj) {
                return obj.getName();
            }

            public void put(ConfigurationViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Value {
            public Object get(ConfigurationViewRowImpl obj) {
                return obj.getValue();
            }

            public void put(ConfigurationViewRowImpl obj, Object value) {
                obj.setValue((String) value);
            }
        }
        ,
        Details2 {
            public Object get(ConfigurationViewRowImpl obj) {
                return obj.getDetails2();
            }

            public void put(ConfigurationViewRowImpl obj, Object value) {
                obj.setDetails2((String) value);
            }
        }
        ,
        IsResource {
            public Object get(ConfigurationViewRowImpl obj) {
                return obj.getIsResource();
            }

            public void put(ConfigurationViewRowImpl obj, Object value) {
                obj.setIsResource((Boolean) value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(ConfigurationViewRowImpl object);

        public abstract void put(ConfigurationViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CODE = AttributesEnum.Code.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int VALUE = AttributesEnum.Value.index();
    public static final int DETAILS2 = AttributesEnum.Details2.index();
    public static final int ISRESOURCE = AttributesEnum.IsResource.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ConfigurationViewRowImpl() {
    }

    /**
     * Gets Configuration entity object.
     * @return the Configuration
     */
    public IPMSEntityImpl getConfiguration() {
        return (IPMSEntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for CODE using the alias name Code.
     * @return the CODE
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }


    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }


    /**
     * Gets the attribute value for VALUE using the alias name Value.
     * @return the VALUE
     */
    public String getValue() {
        return (String) getAttributeInternal(VALUE);
    }

    /**
     * Sets <code>value</code> as attribute value for VALUE using the alias name Value.
     * @param value value to set the VALUE
     */
    public void setValue(String value) {
        setAttributeInternal(VALUE, value);
    }


    /**
     * Gets the attribute value for DETAILS2 using the alias name Details2.
     * @return the DETAILS2
     */
    public String getDetails2() {
        return (String) getAttributeInternal(DETAILS2);
    }

    /**
     * Sets <code>value</code> as attribute value for DETAILS2 using the alias name Details2.
     * @param value value to set the DETAILS2
     */
    public void setDetails2(String value) {
        setAttributeInternal(DETAILS2, value);
    }

    /**
     * Gets the attribute value for IS_RESOURCE using the alias name IsResource.
     * @return the IS_RESOURCE
     */
    public Boolean getIsResource() {
        return (Boolean) getAttributeInternal(ISRESOURCE);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_RESOURCE using the alias name IsResource.
     * @param value value to set the IS_RESOURCE
     */
    public void setIsResource(Boolean value) {
        setAttributeInternal(ISRESOURCE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
