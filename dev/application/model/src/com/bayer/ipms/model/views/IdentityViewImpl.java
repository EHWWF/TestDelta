package com.bayer.ipms.model.views;


import com.bayer.ipms.model.base.IPMSViewObjectImpl;

import java.sql.ResultSet;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import oracle.security.idm.IMException;
import oracle.security.idm.Identity;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 31 15:07:41 EEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class IdentityViewImpl extends IPMSViewObjectImpl {
    protected static ADFLogger logger = ADFLogger.createADFLogger(UserViewImpl.class);
    protected List<Identity> list = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public IdentityViewImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        if (this.list == null) {
            this.list = load();
        }
        
        setFetchPos(qc, 0);
        
        super.executeQueryForCollection(qc, params, noUserParams);
    }
    
    /** 
     * Store the current fetch position in the user data context
     */
    protected void setFetchPos(Object rowset, int pos) {
        if (pos == this.list.size()) {
            setFetchCompleteForCollection(rowset, true);
        }
        setUserDataForCollection(rowset, new Integer(pos));
    }
    
    /**
     * Get the current fetch position from the user data context
     */
    protected int getFetchPos(Object rowset) {
        return ((Integer)getUserDataForCollection(rowset)).intValue();
    }


    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        return (getFetchPos(qc) < this.list.size());
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        IdentityViewRowImpl r = (IdentityViewRowImpl)createNewRowForCollection(qc);
        int pos = getFetchPos(qc);
        
        try {
            Identity id = this.list.get(pos);
            
            String username = id.getName();
            if (id.getDisplayName() != null)
                username = id.getDisplayName() + " (" + username + ")";
            
            populateAttributeForRow(r, 0, id.getName());            
            populateAttributeForRow(r, 1, username);
            
            r.setIdentity(id);
        } catch(IMException e) {
            logger.severe(e.getMessage());
        }
        
        setFetchPos(qc, pos + 1);
        return r;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        return (this.list == null ? -1 : this.list.size());
    }
    
    /**
     * @return a list of identities assigned for application
     */
    protected List<Identity> load() {
        return Collections.emptyList();
    }
    
    protected static class IdentityComparator implements Comparator<Identity> {
      @Override
      public int compare(Identity x, Identity y) {
          try {
              return x.getName().toLowerCase().compareTo(y.getName().toLowerCase());
          } catch (IMException exc) {
              return 0;
          }
      }
    }
    
    //Added for IPMS-1018
    
    protected static class RoleIdentityComparator implements Comparator<Identity> {
      @Override
      public int compare(Identity x, Identity y) {
          try {             
            return x.getDisplayName().toLowerCase().compareTo(y.getDisplayName().toLowerCase());
          } catch (IMException exc) {
              return 0;
          }
      }
    }


}
