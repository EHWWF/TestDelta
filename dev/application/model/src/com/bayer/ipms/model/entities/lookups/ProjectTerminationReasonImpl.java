package com.bayer.ipms.model.entities.lookups;

import com.bayer.ipms.model.base.IPMSEntityImpl;

import com.tangosol.dev.assembler.Try;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import oracle.jbo.AlreadyLockedException;
import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 11 17:51:34 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectTerminationReasonImpl extends IPMSEntityImpl {


    /**
     * Add locking logic here.
     */
    public void lock() {
        handleStoredProcLock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Code {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getCode();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setCode((String) value);
            }
        }
        ,
        Name {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getName();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        IsActive {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getIsActive();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setIsActive((Boolean) value);
            }
        }
        ,
        Description {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getDescription();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setDescription((String) value);
            }
        }
        ,
        RefReasonCode {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getRefReasonCode();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setRefReasonCode((String) value);
            }
        }
        ,
        D1 {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getD1();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setD1((Boolean) value);
            }
        }
        ,
        D2 {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getD2();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setD2((Boolean) value);
            }
        }
        ,
        Dev {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getDev();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setDev((Boolean) value);
            }
        }
        ,
        PrdMnt {
            public Object get(ProjectTerminationReasonImpl obj) {
                return obj.getPrdMnt();
            }

            public void put(ProjectTerminationReasonImpl obj, Object value) {
                obj.setPrdMnt((Boolean) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ProjectTerminationReasonImpl object);

        public abstract void put(ProjectTerminationReasonImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CODE = AttributesEnum.Code.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int ISACTIVE = AttributesEnum.IsActive.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int REFREASONCODE = AttributesEnum.RefReasonCode.index();
    public static final int D1 = AttributesEnum.D1.index();
    public static final int D2 = AttributesEnum.D2.index();
    public static final int DEV = AttributesEnum.Dev.index();
    public static final int PRDMNT = AttributesEnum.PrdMnt.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectTerminationReasonImpl() {
    }

    /**
     * Gets the attribute value for Code, using the alias name Code.
     * @return the value of Code
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Code.
     * @param value value to set the Code
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for IsActive, using the alias name IsActive.
     * @return the value of IsActive
     */
    public Boolean getIsActive() {
        return (Boolean) getAttributeInternal(ISACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsActive.
     * @param value value to set the IsActive
     */
    public void setIsActive(Boolean value) {
        setAttributeInternal(ISACTIVE, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for RefReasonCode, using the alias name RefReasonCode.
     * @return the value of RefReasonCode
     */
    public String getRefReasonCode() {
        return (String) getAttributeInternal(REFREASONCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefReasonCode.
     * @param value value to set the RefReasonCode
     */
    public void setRefReasonCode(String value) {
        setAttributeInternal(REFREASONCODE, value);
    }

    /**
     * Gets the attribute value for D1, using the alias name D1.
     * @return the value of D1
     */
    public Boolean getD1() {
        return (Boolean) getAttributeInternal(D1);
    }

    /**
     * Sets <code>value</code> as the attribute value for D1.
     * @param value value to set the D1
     */
    public void setD1(Boolean value) {
        setAttributeInternal(D1, value);
    }

    /**
     * Gets the attribute value for D2, using the alias name D2.
     * @return the value of D2
     */
    public Boolean getD2() {
        return (Boolean) getAttributeInternal(D2);
    }

    /**
     * Sets <code>value</code> as the attribute value for D2.
     * @param value value to set the D2
     */
    public void setD2(Boolean value) {
        setAttributeInternal(D2, value);
    }

    /**
     * Gets the attribute value for Dev, using the alias name Dev.
     * @return the value of Dev
     */
    public Boolean getDev() {
        return (Boolean) getAttributeInternal(DEV);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dev.
     * @param value value to set the Dev
     */
    public void setDev(Boolean value) {
        setAttributeInternal(DEV, value);
    }

    /**
     * Gets the attribute value for PrdMnt, using the alias name PrdMnt.
     * @return the value of PrdMnt
     */
    public Boolean getPrdMnt() {
        return (Boolean) getAttributeInternal(PRDMNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrdMnt.
     * @param value value to set the PrdMnt
     */
    public void setPrdMnt(Boolean value) {
        setAttributeInternal(PRDMNT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param code key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String code) {
        return new Key(new Object[] { code });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.bayer.ipms.model.entities.lookups.ProjectTerminationReason");
    }


    private void handleStoredProcLock()
    {
         CallableStatement st;
         st = null;

         try
         {
              String stmt = " BEGIN lookup_pkg.lock_row(:1); END;";

              DBTransaction tr = getDBTransaction();

              st = tr.createCallableStatement(stmt, 1);

              st.setString(1, getCode().toString());

              int rows = st.executeUpdate();
             
         }
         
        catch (SQLException e)
        {
             // if other user has row locked, then throw an exception
             
             if (Math.abs(e.getErrorCode()) == 54)
             {
                  throw new AlreadyLockedException(e);
             }
             else
             {
                  throw new JboException(e);
             }
        }
        finally
        {
             try
             {
                  if (st != null) st.close();
             }
             catch (SQLException e)
             {
                  // Ignore
             }
        }                  
    }
}

