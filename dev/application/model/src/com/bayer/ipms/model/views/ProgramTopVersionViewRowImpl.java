package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;


import com.bayer.ipms.model.views.common.ProgramTopVersionViewRow;

import java.math.BigDecimal;

import java.sql.Date;

import java.text.SimpleDateFormat;

import oracle.jbo.AttributeList;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 06 12:16:39 EEST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProgramTopVersionViewRowImpl extends IPMSViewRowImpl implements ProgramTopVersionViewRow {


    public static final int ENTITY_PROGRAMTOPVERSION = 0;

    @Override
    protected void create(AttributeList attributeList) {
        // TODO Implement this method
        super.create(attributeList);
        
        System.out.println("create row impl.....");
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ApprovalDate {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getApprovalDate();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setApprovalDate((Date) value);
            }
        }
        ,
        Description {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getDescription();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setDescription((String) value);
            }
        }
        ,
        Id {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getId();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setId((BigDecimal) value);
            }
        }
        ,
        Name {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getName();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        Version {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getVersion();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setVersion((String) value);
            }
        }
        ,
        ProgramId {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getProgramId();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setProgramId((String) value);
            }
        }
        ,
        ProjectId {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getProjectId();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setProjectId((String) value);
            }
        }
        ,
        ParentId {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getParentId();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setParentId((BigDecimal) value);
            }
        }
        ,
        CreateDate {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getCreateDate();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setCreateDate((Date) value);
            }
        }
        ,
        QueryProjectid {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getQueryProjectid();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VersionNr {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getVersionNr();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProgramView {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getProgramView();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProgramTopValuesView {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getProgramTopValuesView();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProgramTopVersionCategoryView {
            protected Object get(ProgramTopVersionViewRowImpl obj) {
                return obj.getProgramTopVersionCategoryView();
            }

            protected void put(ProgramTopVersionViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;


        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }


        protected abstract Object get(ProgramTopVersionViewRowImpl object);

        protected abstract void put(ProgramTopVersionViewRowImpl object, Object value);
    }


    public static final int APPROVALDATE = AttributesEnum.ApprovalDate.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int PROGRAMID = AttributesEnum.ProgramId.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int PARENTID = AttributesEnum.ParentId.index();
    public static final int CREATEDATE = AttributesEnum.CreateDate.index();
    public static final int QUERYPROJECTID = AttributesEnum.QueryProjectid.index();
    public static final int VERSIONNR = AttributesEnum.VersionNr.index();
    public static final int PROGRAMVIEW = AttributesEnum.ProgramView.index();
    public static final int PROGRAMTOPVALUESVIEW = AttributesEnum.ProgramTopValuesView.index();
    public static final int PROGRAMTOPVERSIONCATEGORYVIEW = AttributesEnum.ProgramTopVersionCategoryView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProgramTopVersionViewRowImpl() {
    }

    /**
     * Gets ProgramTopVersion entity object.
     * @return the ProgramTopVersion
     */
    public IPMSEntityImpl getProgramTopVersion() {
        return (IPMSEntityImpl) getEntity(ENTITY_PROGRAMTOPVERSION);
    }

    /**
     * Gets the attribute value for APPROVAL_DATE using the alias name ApprovalDate.
     * @return the APPROVAL_DATE
     */
    public Date getApprovalDate() {
        return (Date) getAttributeInternal(APPROVALDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for APPROVAL_DATE using the alias name ApprovalDate.
     * @param value value to set the APPROVAL_DATE
     */
    public void setApprovalDate(Date value) {
        setAttributeInternal(APPROVALDATE, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for VERSION using the alias name Version.
     * @return the VERSION
     */
    public String getVersion() {
        return (String) getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for VERSION using the alias name Version.
     * @param value value to set the VERSION
     */
    public void setVersion(String value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for PROGRAM_ID using the alias name ProgramId.
     * @return the PROGRAM_ID
     */
    public String getProgramId() {
        return (String) getAttributeInternal(PROGRAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROGRAM_ID using the alias name ProgramId.
     * @param value value to set the PROGRAM_ID
     */
    public void setProgramId(String value) {
        setAttributeInternal(PROGRAMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ProjectId.
     * @return the ProjectId
     */
    public String getProjectId() {
        return (String) getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROJECT_ID using the alias name ProjectId.
     * @param value value to set the PROJECT_ID
     */
    public void setProjectId(String value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for PARENT_ID using the alias name ParentId.
     * @return the PARENT_ID
     */
    public BigDecimal getParentId() {
        return (BigDecimal) getAttributeInternal(PARENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARENT_ID using the alias name ParentId.
     * @param value value to set the PARENT_ID
     */
    public void setParentId(BigDecimal value) {
        setAttributeInternal(PARENTID, value);
    }

    /**
     * Gets the attribute value for CREATE_DATE using the alias name CreateDate.
     * @return the CREATE_DATE
     */
    public Date getCreateDate() {
        return (Date) getAttributeInternal(CREATEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATE_DATE using the alias name CreateDate.
     * @param value value to set the CREATE_DATE
     */
    public void setCreateDate(Date value) {
        setAttributeInternal(CREATEDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute QueryProjectid.
     * @return the QueryProjectid
     */
    public String getQueryProjectid() {
        return (String) getAttributeInternal(QUERYPROJECTID);
    }

    /**
     * Gets the attribute value for VERSION_NR using the alias name VersionNr.
     * @return the VERSION_NR
     */
    public BigDecimal getVersionNr() {
        return (BigDecimal) getAttributeInternal(VERSIONNR);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link ProgramView.
     */
    public Row getProgramView() {
        return (Row) getAttributeInternal(PROGRAMVIEW);
    }

    /**
     * Sets the master-detail link ProgramView between this object and <code>value</code>.
     */
    public void setProgramView(Row value) {
        setAttributeInternal(PROGRAMVIEW, value);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link ProgramTopValuesView.
     */
    public RowIterator getProgramTopValuesView() {
        return (RowIterator) getAttributeInternal(PROGRAMTOPVALUESVIEW);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link ProgramTopVersionCategoryView.
     */
    public RowIterator getProgramTopVersionCategoryView() {
        return (RowIterator) getAttributeInternal(PROGRAMTOPVERSIONCATEGORYVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    public void createTopVersion(String name, Date appDate, String description) {
        
        String date = null;
        if (appDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
            date = dateFormat.format(appDate);
        }
        
        ProgramTopVersionViewImpl vo = (ProgramTopVersionViewImpl)this.getViewObject();
       System.err.println("createTopVersion, vo.getProjectIdBindVar():" + vo.getProjectIdBindVar());
    
        
        runStatement("begin program_top_pkg.create_version(?,?,?,?,?); end;", true, 
                     this.getProgramId(), name, date, description,  vo.getProjectIdBindVar());
        
        refresh();
    }

    public void copyTopVersionToCurrent() {

        runStatement("begin program_top_pkg.copy_version_to_current(?); end;", true, 
                      this.getId().toString());
    }
    
    public void addMissingSub() {
        System.out.println("------------------addMissingSub----------------");
        if (this.getId() != null) {
           System.out.println( this.getId().toString() );
        } else { System.out.println("ID is NULL");
            }
        runStatement("begin program_top_pkg.add_missing_sub(?); end;", true, this.getId().toString());
    }
}

