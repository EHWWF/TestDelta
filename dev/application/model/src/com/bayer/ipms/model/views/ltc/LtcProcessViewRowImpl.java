package com.bayer.ipms.model.views.ltc;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.ltc.common.LtcProjectViewRow;
import com.bayer.ipms.model.views.common.ProjectViewRow;
import com.bayer.ipms.model.views.estimates.common.LatestEstimatesProjectViewRow;

import com.bayer.ipms.model.views.ltc.common.LtcProcessViewRow;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.adf.share.ADFContext;
import oracle.adf.share.security.SecurityContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 29 14:43:22 EEST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LtcProcessViewRowImpl extends IPMSViewRowImpl implements LtcProcessViewRow {


    public static final int ENTITY_LTCPROCESS = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Comments {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getComments();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setComments((String) value);
            }
        }
        ,
        CreateDate {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getCreateDate();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreateUserId {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getCreateUserId();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Id {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getId();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setId((BigDecimal) value);
            }
        }
        ,
        IsSyncing {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getIsSyncing();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcTagId {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLtcTagId();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setLtcTagId((BigDecimal) value);
            }
        }
        ,
        Name {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getName();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        StatusCode {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getStatusCode();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StatusDate {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getStatusDate();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SyncDate {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getSyncDate();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SyncId {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getSyncId();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setSyncId((String) value);
            }
        }
        ,
        TerminationDate {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getTerminationDate();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setTerminationDate((Date) value);
            }
        }
        ,
        UpdateDate {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getUpdateDate();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UpdateUserId {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getUpdateUserId();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        QualifiedName {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getQualifiedName();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TerminateDate {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getTerminateDate();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setTerminateDate((Date) value);
            }
        }
        ,
        PreviousPD {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getPreviousPD();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setPreviousPD((String) value);
            }
        }
        ,
        ProcessDescription {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getProcessDescription();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setProcessDescription((String) value);
            }
        }
        ,
        LtcTagView {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLtcTagView();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcProjectView {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLtcProjectView();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LEProcessStatus {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLEProcessStatus();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PrefillTypeDeterministicView {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getPrefillTypeDeterministicView();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PrefillTypeProbabilisticView {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getPrefillTypeProbabilisticView();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LtcProcessView {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLtcProcessView();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastLtcProcessView {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLastLtcProcessView();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LTCProcessVA {
            protected Object get(LtcProcessViewRowImpl obj) {
                return obj.getLTCProcessVA();
            }

            protected void put(LtcProcessViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;


        public int index() {
            return LtcProcessViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return LtcProcessViewRowImpl.AttributesEnum.firstIndex() +
                   LtcProcessViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = LtcProcessViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }


        protected abstract Object get(LtcProcessViewRowImpl object);

        protected abstract void put(LtcProcessViewRowImpl object, Object value);
    }


    public static final int COMMENTS = AttributesEnum.Comments.index();
    public static final int CREATEDATE = AttributesEnum.CreateDate.index();
    public static final int CREATEUSERID = AttributesEnum.CreateUserId.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int ISSYNCING = AttributesEnum.IsSyncing.index();
    public static final int LTCTAGID = AttributesEnum.LtcTagId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int STATUSCODE = AttributesEnum.StatusCode.index();
    public static final int STATUSDATE = AttributesEnum.StatusDate.index();
    public static final int SYNCDATE = AttributesEnum.SyncDate.index();
    public static final int SYNCID = AttributesEnum.SyncId.index();
    public static final int TERMINATIONDATE = AttributesEnum.TerminationDate.index();
    public static final int UPDATEDATE = AttributesEnum.UpdateDate.index();
    public static final int UPDATEUSERID = AttributesEnum.UpdateUserId.index();
    public static final int QUALIFIEDNAME = AttributesEnum.QualifiedName.index();
    public static final int TERMINATEDATE = AttributesEnum.TerminateDate.index();
    public static final int PREVIOUSPD = AttributesEnum.PreviousPD.index();
    public static final int PROCESSDESCRIPTION = AttributesEnum.ProcessDescription.index();
    public static final int LTCTAGVIEW = AttributesEnum.LtcTagView.index();
    public static final int LTCPROJECTVIEW = AttributesEnum.LtcProjectView.index();
    public static final int LEPROCESSSTATUS = AttributesEnum.LEProcessStatus.index();
    public static final int PREFILLTYPEDETERMINISTICVIEW = AttributesEnum.PrefillTypeDeterministicView.index();
    public static final int PREFILLTYPEPROBABILISTICVIEW = AttributesEnum.PrefillTypeProbabilisticView.index();
    public static final int LTCPROCESSVIEW = AttributesEnum.LtcProcessView.index();
    public static final int LASTLTCPROCESSVIEW = AttributesEnum.LastLtcProcessView.index();
    public static final int LTCPROCESSVA = AttributesEnum.LTCProcessVA.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LtcProcessViewRowImpl() {
    }

    /**
     * Gets LtcProcess entity object.
     * @return the LtcProcess
     */
    public IPMSEntityImpl getLtcProcess() {
        return (IPMSEntityImpl) getEntity(ENTITY_LTCPROCESS);
    }

    /**
     * Gets the attribute value for COMMENTS using the alias name Comments.
     * @return the COMMENTS
     */
    public String getComments() {
        return (String) getAttributeInternal(COMMENTS);
    }

    /**
     * Sets <code>value</code> as attribute value for COMMENTS using the alias name Comments.
     * @param value value to set the COMMENTS
     */
    public void setComments(String value) {
        setAttributeInternal(COMMENTS, value);
    }

    /**
     * Gets the attribute value for CREATE_DATE using the alias name CreateDate.
     * @return the CREATE_DATE
     */
    public Date getCreateDate() {
        return (Date) getAttributeInternal(CREATEDATE);
    }

    /**
     * Gets the attribute value for CREATE_USER_ID using the alias name CreateUserId.
     * @return the CREATE_USER_ID
     */
    public String getCreateUserId() {
        return (String) getAttributeInternal(CREATEUSERID);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for IS_SYNCING using the alias name IsSyncing.
     * @return the IS_SYNCING
     */
    public Integer getIsSyncing() {
        return (Integer) getAttributeInternal(ISSYNCING);
    }

    /**
     * Gets the attribute value for LTC_TAG_ID using the alias name LtcTagId.
     * @return the LTC_TAG_ID
     */
    public BigDecimal getLtcTagId() {
        return (BigDecimal) getAttributeInternal(LTCTAGID);
    }

    /**
     * Sets <code>value</code> as attribute value for LTC_TAG_ID using the alias name LtcTagId.
     * @param value value to set the LTC_TAG_ID
     */
    public void setLtcTagId(BigDecimal value) {
        setAttributeInternal(LTCTAGID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for STATUS_CODE using the alias name StatusCode.
     * @return the STATUS_CODE
     */
    public String getStatusCode() {
        return (String) getAttributeInternal(STATUSCODE);
    }

    /**
     * Gets the attribute value for STATUS_DATE using the alias name StatusDate.
     * @return the STATUS_DATE
     */
    public Date getStatusDate() {
        return (Date) getAttributeInternal(STATUSDATE);
    }

    /**
     * Gets the attribute value for SYNC_DATE using the alias name SyncDate.
     * @return the SYNC_DATE
     */
    public Date getSyncDate() {
        return (Date) getAttributeInternal(SYNCDATE);
    }

    /**
     * Gets the attribute value for SYNC_ID using the alias name SyncId.
     * @return the SYNC_ID
     */
    public String getSyncId() {
        return (String) getAttributeInternal(SYNCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SYNC_ID using the alias name SyncId.
     * @param value value to set the SYNC_ID
     */
    public void setSyncId(String value) {
        setAttributeInternal(SYNCID, value);
    }

    /**
     * Gets the attribute value for TERMINATION_DATE using the alias name TerminationDate.
     * @return the TERMINATION_DATE
     */
    public Date getTerminationDate() {
        return (Date) getAttributeInternal(TERMINATIONDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for TERMINATION_DATE using the alias name TerminationDate.
     * @param value value to set the TERMINATION_DATE
     */
    public void setTerminationDate(Date value) {
        setAttributeInternal(TERMINATIONDATE, value);
    }

    /**
     * Gets the attribute value for UPDATE_DATE using the alias name UpdateDate.
     * @return the UPDATE_DATE
     */
    public Date getUpdateDate() {
        return (Date) getAttributeInternal(UPDATEDATE);
    }

    /**
     * Gets the attribute value for UPDATE_USER_ID using the alias name UpdateUserId.
     * @return the UPDATE_USER_ID
     */
    public String getUpdateUserId() {
        return (String) getAttributeInternal(UPDATEUSERID);
    }

    /**
     * Gets the attribute value for the calculated attribute QualifiedName.
     * @return the QualifiedName
     */
    public String getQualifiedName() {
        return (String) getAttributeInternal(QUALIFIEDNAME);
    }

    /**
     * Gets the attribute value for TERMINATE_DATE using the alias name TerminateDate.
     * @return the TERMINATE_DATE
     */
    public Date getTerminateDate() {
        return (Date) getAttributeInternal(TERMINATEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for TERMINATE_DATE using the alias name TerminateDate.
     * @param value value to set the TERMINATE_DATE
     */
    public void setTerminateDate(Date value) {
        setAttributeInternal(TERMINATEDATE, value);
    }

    /**
     * Gets the attribute value for PREVIOUS_PD using the alias name PreviousPD.
     * @return the PREVIOUS_PD
     */
    public String getPreviousPD() {
        return (String) getAttributeInternal(PREVIOUSPD);
    }

    /**
     * Sets <code>value</code> as attribute value for PREVIOUS_PD using the alias name PreviousPD.
     * @param value value to set the PREVIOUS_PD
     */
    public void setPreviousPD(String value) {
        setAttributeInternal(PREVIOUSPD, value);
    }

    /**
     * Gets the attribute value for PROCESS_DESCRIPTION using the alias name ProcessDescription.
     * @return the PROCESS_DESCRIPTION
     */
    public String getProcessDescription() {
        return (String) getAttributeInternal(PROCESSDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for PROCESS_DESCRIPTION using the alias name ProcessDescription.
     * @param value value to set the PROCESS_DESCRIPTION
     */
    public void setProcessDescription(String value) {
        setAttributeInternal(PROCESSDESCRIPTION, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link LtcTagView.
     */
    public Row getLtcTagView() {
        return (Row) getAttributeInternal(LTCTAGVIEW);
    }

    /**
     * Sets the master-detail link LtcTagView between this object and <code>value</code>.
     */
    public void setLtcTagView(Row value) {
        setAttributeInternal(LTCTAGVIEW, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link LtcProjectView.
     */
    public RowIterator getLtcProjectView() {
        return (RowIterator) getAttributeInternal(LTCPROJECTVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LEProcessStatus.
     */
    public RowSet getLEProcessStatus() {
        return (RowSet) getAttributeInternal(LEPROCESSSTATUS);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PrefillTypeDeterministicView.
     */
    public RowSet getPrefillTypeDeterministicView() {
        return (RowSet) getAttributeInternal(PREFILLTYPEDETERMINISTICVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PrefillTypeProbabilisticView.
     */
    public RowSet getPrefillTypeProbabilisticView() {
        return (RowSet) getAttributeInternal(PREFILLTYPEPROBABILISTICVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LtcProcessView.
     */
    public RowSet getLtcProcessView() {
        return (RowSet) getAttributeInternal(LTCPROCESSVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LastLtcProcessView.
     */
    public RowSet getLastLtcProcessView() {
        return (RowSet) getAttributeInternal(LASTLTCPROCESSVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LTCProcessVA.
     */
    public RowSet getLTCProcessVA() {
        return (RowSet) getAttributeInternal(LTCPROCESSVA);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    public void add(ProjectViewRow project) {
        RowIterator lesRowIter = getLtcProjectView();

        Key key = new Key(new Object[] { getId(), project.getId() });
        if (lesRowIter.findByKey(key, 1).length != 0) {
            return;
        }

        LtcProjectViewRow lesRow = (LtcProjectViewRow) lesRowIter.createRow();
        lesRow.setProjectId(project.getId());
        lesRowIter.insertRow(lesRow);
        lesRowIter.setCurrentRow(lesRow);
    }   
    
    public void add(LtcProjectViewRow leprRow) {
        RowIterator lesRowIter = getLtcProjectView();

        Key key = new Key(new Object[] { getId(), leprRow.getProjectId() });
        if (lesRowIter.findByKey(key, 1).length != 0) {
            return;
        }

        LtcProjectViewRow lesRow = (LtcProjectViewRow) lesRowIter.createRow();
        lesRow.setProjectId(leprRow.getProjectId());
        lesRowIter.insertRow(lesRow);
        lesRowIter.setCurrentRow(lesRow);
    }    
    
    public void start() {
       SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
       String user = sctx.getUserName();         
       runStatement("begin ltc_bpm_pkg.start_process(?,?); end;", true, user, getId().toString());      
    }

    public void stop() { 
       SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
       String user = sctx.getUserName();         
       runStatement("begin ltc_bpm_pkg.stop_process(?, ?); end;", true, user, getId().toString());
    }

    public void restart() {    
        SecurityContext sctx = ADFContext.getCurrent().getSecurityContext(); 
        String user = sctx.getUserName();         
        runStatement("begin ltc_bpm_pkg.restart_process(?, ?); end;", true, user, getId().toString());
    }    

    public void submit() {
        //runStatement("begin estimates_pkg.submit(?,?); end;", true, getId(), null);
        System.out.println("Submit:"+getId().toString());
    }    
    
    public void removeAllProjects() {

        Row[] rows = getLtcProjectView().getAllRowsInRange();
        for (int i = 0; i < rows.length; i++)
            if (rows[i] != null)
                rows[i].remove();
    }
    
}

