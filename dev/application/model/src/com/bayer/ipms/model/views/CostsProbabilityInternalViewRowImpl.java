package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.common.CostsProbabilitySpecificViewRow;
import com.bayer.ipms.model.views.common.CostsProbabilityViewRow;
import com.bayer.ipms.model.views.common.CostsProbabilityInternalViewRow;

import com.bayer.ipms.model.views.common.ProjectViewRow;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 13 11:38:57 EEST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CostsProbabilityInternalViewRowImpl extends CostsProbabilityViewRowImpl implements CostsProbabilityInternalViewRow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PhaseCode {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.getPhaseCode();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.setPhaseCode((String)value);
            }
        }
        ,
        ProjectId {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.getProjectId();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.setProjectId((String)value);
            }
        }
        ,
        PhaseName {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.getPhaseName();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.setPhaseName((String)value);
            }
        }
        ,
        _PhaseCode {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.get_PhaseCode();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.set_PhaseCode((String)value);
            }
        }
        ,
        Ordering {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.getOrdering();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.setOrdering((Integer)value);
            }
        }
        ,
        ProjectView {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.getProjectView();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CostsProbabilityDefaultView {
            public Object get(CostsProbabilityInternalViewRowImpl obj) {
                return obj.getCostsProbabilityDefaultView();
            }

            public void put(CostsProbabilityInternalViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = ViewDefImpl.getMaxAttrConst("com.bayer.ipms.model.views.CostsProbabilityView");

        public abstract Object get(CostsProbabilityInternalViewRowImpl object);

        public abstract void put(CostsProbabilityInternalViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PHASECODE = AttributesEnum.PhaseCode.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int PHASENAME = AttributesEnum.PhaseName.index();
    public static final int _PHASECODE = AttributesEnum._PhaseCode.index();
    public static final int ORDERING = AttributesEnum.Ordering.index();
    public static final int PROJECTVIEW = AttributesEnum.ProjectView.index();
    public static final int COSTSPROBABILITYDEFAULTVIEW = AttributesEnum.CostsProbabilityDefaultView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CostsProbabilityInternalViewRowImpl() {
    }

    /**
     * Gets CostsProbability entity object.
     * @return the CostsProbability
     */
    public IPMSEntityImpl getCostsProbability() {
        return (IPMSEntityImpl)getEntity(0);
    }

    /**
     * Gets Phase entity object.
     * @return the Phase
     */
    public IPMSEntityImpl getPhase() {
        return (IPMSEntityImpl)getEntity(1);
    }

    /**
     * Gets the attribute value for CREATE_DATE using the alias name CreateDate.
     * @return the CREATE_DATE
     */
    public Date getCreateDate() {
        return super.getCreateDate();
    }

    /**
     * Sets <code>value</code> as attribute value for CREATE_DATE using the alias name CreateDate.
     * @param value value to set the CREATE_DATE
     */
    public void setCreateDate(Date value) {
        super.setCreateDate(value);
    }

    /**
     * Gets the attribute value for CREATE_USER_ID using the alias name CreateUserId.
     * @return the CREATE_USER_ID
     */
    public String getCreateUserId() {
        return super.getCreateUserId();
    }

    /**
     * Sets <code>value</code> as attribute value for CREATE_USER_ID using the alias name CreateUserId.
     * @param value value to set the CREATE_USER_ID
     */
    public void setCreateUserId(String value) {
        super.setCreateUserId(value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return super.getId();
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(String value) {
        super.setId(value);
    }

    /**
     * Gets the attribute value for PROBABILITY using the alias name Probability.
     * @return the PROBABILITY
     */
    public Integer getProbability() {
        return super.getProbability();
    }

    /**
     * Sets <code>value</code> as attribute value for PROBABILITY using the alias name Probability.
     * @param value value to set the PROBABILITY
     */
    public void setProbability(Integer value) {
        super.setProbability(value);
    }

    /**
     * Gets the attribute value for SCOPE_CODE using the alias name ScopeCode.
     * @return the SCOPE_CODE
     */
    public String getScopeCode() {
        return (String) getAttributeInternal("ScopeCode");
    }

    /**
     * Sets <code>value</code> as attribute value for SCOPE_CODE using the alias name ScopeCode.
     * @param value value to set the SCOPE_CODE
     */
    public void setScopeCode(String value) {
        setAttributeInternal("ScopeCode", value);
    }

    /**
     * Gets the attribute value for UPDATE_DATE using the alias name UpdateDate.
     * @return the UPDATE_DATE
     */
    public Date getUpdateDate() {
        return super.getUpdateDate();
    }

    /**
     * Sets <code>value</code> as attribute value for UPDATE_DATE using the alias name UpdateDate.
     * @param value value to set the UPDATE_DATE
     */
    public void setUpdateDate(Date value) {
        super.setUpdateDate(value);
    }

    /**
     * Gets the attribute value for UPDATE_USER_ID using the alias name UpdateUserId.
     * @return the UPDATE_USER_ID
     */
    public String getUpdateUserId() {
        return super.getUpdateUserId();
    }

    /**
     * Sets <code>value</code> as attribute value for UPDATE_USER_ID using the alias name UpdateUserId.
     * @param value value to set the UPDATE_USER_ID
     */
    public void setUpdateUserId(String value) {
        super.setUpdateUserId(value);
    }

    /**
     * Gets the attribute value for PHASE_CODE using the alias name PhaseCode.
     * @return the PHASE_CODE
     */
    public String getPhaseCode() {
        return (String) getAttributeInternal(PHASECODE);
    }

    /**
     * Sets <code>value</code> as attribute value for PHASE_CODE using the alias name PhaseCode.
     * @param value value to set the PHASE_CODE
     */
    public void setPhaseCode(String value) {
        setAttributeInternal(PHASECODE, value);
    }

    /**
     * Gets the attribute value for PROJECT_ID using the alias name ProjectId.
     * @return the PROJECT_ID
     */
    public String getProjectId() {
        return (String) getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROJECT_ID using the alias name ProjectId.
     * @param value value to set the PROJECT_ID
     */
    public void setProjectId(String value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name PhaseName.
     * @return the NAME
     */
    public String getPhaseName() {
        return (String) getAttributeInternal(PHASENAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name PhaseName.
     * @param value value to set the NAME
     */
    public void setPhaseName(String value) {
        setAttributeInternal(PHASENAME, value);
    }

    /**
     * Gets the attribute value for CODE using the alias name _PhaseCode.
     * @return the CODE
     */
    public String get_PhaseCode() {
        return (String) getAttributeInternal(_PHASECODE);
    }

    /**
     * Sets <code>value</code> as attribute value for CODE using the alias name _PhaseCode.
     * @param value value to set the CODE
     */
    public void set_PhaseCode(String value) {
        setAttributeInternal(_PHASECODE, value);
    }


    /**
     * Gets the attribute value for ORDERING using the alias name Ordering.
     * @return the ORDERING
     */
    public Integer getOrdering() {
        return (Integer)getAttributeInternal(ORDERING);
    }

    /**
     * Sets <code>value</code> as attribute value for ORDERING using the alias name Ordering.
     * @param value value to set the ORDERING
     */
    public void setOrdering(Integer value) {
        setAttributeInternal(ORDERING, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link ProjectView.
     */
    public oracle.jbo.Row getProjectView() {
        return (oracle.jbo.Row) getAttributeInternal(PROJECTVIEW);
    }

    /**
     * Sets the master-detail link ProjectView between this object and <code>value</code>.
     */
    public void setProjectView(oracle.jbo.Row value) {
        setAttributeInternal(PROJECTVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CostsProbabilityDefaultView.
     */
    public RowSet getCostsProbabilityDefaultView() {
        return (RowSet)getAttributeInternal(COSTSPROBABILITYDEFAULTVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    public CostsProbabilitySpecificViewRow getDefault() {
        return ((ProjectViewRow)getProjectView()).getDefaultProbabilities().get(getPhaseCode());
    }
}
