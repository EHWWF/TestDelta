package com.bayer.ipms.model.views.imports;

import com.bayer.ipms.model.base.IPMSViewObjectImpl;
import com.bayer.ipms.model.views.imports.common.ImportStudyView;

import com.bayer.ipms.model.views.imports.common.ImportStudyViewRow;

import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;

import oracle.jbo.ValidationException;

import oracle.jbo.server.ViewRowImpl;

import org.apache.commons.lang.StringUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 18 09:40:51 CEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ImportStudyViewImpl extends IPMSViewObjectImpl implements ImportStudyView {
    
    public static final String IMPORT_ACTION_CODE_VALUE = "APPLY";
    
    /**
     * This is the default constructor (do not remove).
     */
    public ImportStudyViewImpl() {
    }

    /**
     * Returns the variable value for PreselectedStudy.
     * @return variable value for PreselectedStudy
     */
    public String getPreselectedStudy() {
        return (String) ensureVariableManager().getVariableValue("PreselectedStudy");
    }

    /**
     * Sets <code>value</code> for variable PreselectedStudy.
     * @param value value to bind as PreselectedStudy
     */
    public void setPreselectedStudy(String value) {
        ensureVariableManager().setVariableValue("PreselectedStudy", value);
    }
    
    /**
     * Iterates through all studies and checks whether the studies selected for import have all neccessary attributes set.
     * @throws ValidationException in case not all mandatory attributes are set for studies selected for import
     */
    public void validateStudies() throws ValidationException {
        List<String> failedStudies = new ArrayList<String>();
        
        // Get all the rows of a iterator
        RowSetIterator rsi = this.createRowSetIterator(null);
        while (rsi.hasNext() ) {
            ImportStudyViewRowImpl studyRow = (ImportStudyViewRowImpl) rsi.next();
            
            if (Boolean.TRUE.equals(studyRow.getIsImport()) && (studyRow.getParentWbsName() == null || "".equals(studyRow.getParentWbsName())))
                failedStudies.add( studyRow.getStudyId() );
        }
        rsi.closeRowSetIterator();
        
        if (failedStudies.size() > 0)
            throw new ValidationException(
                this.getResourceBundleDef(),
                "com.bayer.ipms.model.views.imports.ImportStudyView.VALIDATION_ERROR",
                new Object[] { StringUtils.join( failedStudies.toArray(), ", " ) }
            );
    }
    
    /**
     * Executes study import
     */
    public void doImport() {
        // 1. Set Action for each study
        RowSetIterator rsi = this.createRowSetIterator(null);
        while (rsi.hasNext() ) {
            ImportStudyViewRowImpl studyRow = (ImportStudyViewRowImpl) rsi.next();
            this.logger.fine(String.format("Study %s (%s): Import(%s), IsPlaceholder(%s), IsGPDCApproved(%s), IsObligation(%s), IsProbing(%s), Template(%s), Wbs(%s: %s)",
                                              studyRow.getName(), studyRow.getStudyId(),
                                              studyRow.getIsImport(), studyRow.getIsPlaceholder(),
                                              studyRow.getIsGpdcApproved(), studyRow.getIsObligation(),
                                              studyRow.getIsProbing(), studyRow.getTemplateId(),
                                              studyRow.getParentWbsId(), studyRow.getParentWbsName()));
            
            if (Boolean.TRUE.equals(studyRow.getIsImport()))
                studyRow.setActionCode(IMPORT_ACTION_CODE_VALUE);
        }
        rsi.closeRowSetIterator();
        
        // 2. Commit the changes
        this.getDBTransaction().commit();
    }
    
    public void selectAllInRange() {
        this.toggleSelectAllInRange(true);
    }
    
    public void unselectAllInRange() {
        this.toggleSelectAllInRange(false);
    }
    
    /**
     * Toggles study selection in the current range.
     * @param isSelect if this parameter is TRUE, then all studies in the range will be selected for import. If FALSE, then no study in the range will be selected for import.
     */
    private void toggleSelectAllInRange(boolean isSelect) {
        // Get all the rows of the range
        for (Row study : this.getAllRowsInRange()) {
            ((ImportStudyViewRow) study).setIsImport(isSelect);
        }
    }
}

