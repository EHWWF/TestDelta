package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSViewObjectImpl;

import com.bayer.ipms.model.views.common.TaskViewRow;


import org.w3c.dom.Element;

import java.sql.ResultSet;

import java.sql.SQLException;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;


import java.util.List;
import java.util.ArrayList;


import oracle.jbo.domain.Date;

import org.w3c.dom.NodeList;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 26 10:42:26 CET 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TaskViewImpl extends IPMSViewObjectImpl {
    // Fetched task data. Use it only while filling view object data.

    private long tasksDate = 0;
    

    /**
     * This is the default constructor (do not remove).
     */
    public TaskViewImpl() {
    }
    
    @Override
    /*public void clearCache() {
        super.clearCache();
        
        this.tasks = null;
    }*/

    /**
     * Overriden view object's method. Fetches data.
     */
    protected void executeQueryForCollection(Object rowset, Object[] params, int noUserParams) {
        long now = new java.util.Date().getTime();
        if ((now - this.tasksDate) > 60000) {
        //if (this.tasks == null) {   this.tasks = getTasks();
            this.tasksDate = now;
        }

        setFetchPos(rowset, 0);
        super.executeQueryForCollection(rowset, params, noUserParams);
    }

    /**
     * Overriden view object's method. Used for initializing view rows row by row.
     */
    protected boolean hasNextForCollection(Object rowset) {
        return (getFetchPos(rowset) < 1);
    }

    /**
     * Overriden view object's method. Actual filling of view row data.
     */
    protected ViewRowImpl createRowFromResultSet(Object rowset, ResultSet rs) {
        TaskViewRowImpl r = (TaskViewRowImpl)createNewRowForCollection(rowset);
        int pos = getFetchPos(rowset);

        fillTaskViewRow(r, pos);

        setFetchPos(rowset, pos + 1);
        return r;
    }

    /**
     * Overriden view object's method.
     */
    protected void create() {
        super.create();

        // Wipe out all traces of a query for this VO
        getViewDef().setQuery(null);
        getViewDef().setSelectClause(null);
        setQuery(null);
    }

    /**
     * Overriden view object's method. Returns count of view object's filled rows.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
       return 1;
    }

    /**
     * Method for handling view object data filling. Stores the current fetch position in the user data context.
     */
    private void setFetchPos(Object rowset, int pos) {
        
    }

    /**
     * Method for handling view object data filling. Get the current fetch position from the user data context.
     */
    private int getFetchPos(Object rowset) {
        return ((Integer)getUserDataForCollection(rowset)).intValue();
    }

   

    /**
     * Get task list using workflow task query service.
     */
    private List getTasks() {
       return new ArrayList();
    }

    /**
     * Fill data to task view row.
     * @param taskViewRow row to fill data to
     * @param taskListPos position in [this.tasks] to get data from (this data must be already initialized by workflow task query service)
     */
    protected void fillTaskViewRow(TaskViewRowImpl taskViewRow, int taskListPos) {
        
    }



  
    protected void setTaskOutcome(TaskViewRow taskRow, String outcome) {
       
    }

}
