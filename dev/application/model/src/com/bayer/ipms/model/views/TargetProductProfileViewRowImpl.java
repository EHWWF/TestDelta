package com.bayer.ipms.model.views;

import com.bayer.ipms.model.base.IPMSEntityImpl;
import com.bayer.ipms.model.base.IPMSViewRowImpl;

import com.bayer.ipms.model.views.common.TargetProductProfileViewRow;

import java.sql.Date;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.text.SimpleDateFormat;

import oracle.jbo.JboException;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 30 18:26:56 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TargetProductProfileViewRowImpl extends IPMSViewRowImpl implements TargetProductProfileViewRow {


    public static final int ENTITY_TARGETPRODUCTPROFILE = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ApprovalDate {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getApprovalDate();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setApprovalDate((Date) value);
            }
        }
        ,
        Description {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getDescription();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setDescription((String) value);
            }
        }
        ,
        Id {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getId();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setId((String) value);
            }
        }
        ,
        Name {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getName();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        ProjectId {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getProjectId();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setProjectId((String) value);
            }
        }
        ,
        Version {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getVersion();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setVersion((String) value);
            }
        }
        ,
        Indication {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getIndication();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setIndication((String) value);
            }
        }
        ,
        References {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getReferences();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setReferences((String) value);
            }
        }
        ,
        CreateDate {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getCreateDate();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TPPProfileCategoryView {
            public Object get(TargetProductProfileViewRowImpl obj) {
                return obj.getTPPProfileCategoryView();
            }

            public void put(TargetProductProfileViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(TargetProductProfileViewRowImpl object);

        public abstract void put(TargetProductProfileViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                   AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int APPROVALDATE = AttributesEnum.ApprovalDate.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int INDICATION = AttributesEnum.Indication.index();
    public static final int REFERENCES = AttributesEnum.References.index();
    public static final int CREATEDATE = AttributesEnum.CreateDate.index();
    public static final int TPPPROFILECATEGORYVIEW = AttributesEnum.TPPProfileCategoryView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TargetProductProfileViewRowImpl() {
    }

    /**
     * Gets TargetProductProfile entity object.
     * @return the TargetProductProfile
     */
    public IPMSEntityImpl getTargetProductProfile() {
        return (IPMSEntityImpl)getEntity(ENTITY_TARGETPRODUCTPROFILE);
    }

    /**
     * Gets the attribute value for APPROVAL_DATE using the alias name ApprovalDate.
     * @return the APPROVAL_DATE
     */
    public Date getApprovalDate() {
        return (Date)getAttributeInternal(APPROVALDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for APPROVAL_DATE using the alias name ApprovalDate.
     * @param value value to set the APPROVAL_DATE
     */
    public void setApprovalDate(Date value) {
        setAttributeInternal(APPROVALDATE, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return (String)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for PROJECT_ID using the alias name ProjectId.
     * @return the PROJECT_ID
     */
    public String getProjectId() {
        return (String)getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROJECT_ID using the alias name ProjectId.
     * @param value value to set the PROJECT_ID
     */
    public void setProjectId(String value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for VERSION using the alias name Version.
     * @return the VERSION
     */
    public String getVersion() {
        return (String)getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for VERSION using the alias name Version.
     * @param value value to set the VERSION
     */
    public void setVersion(String value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for INDICATION using the alias name Indication.
     * @return the INDICATION
     */
    public String getIndication() {
        return (String)getAttributeInternal(INDICATION);
    }

    /**
     * Sets <code>value</code> as attribute value for INDICATION using the alias name Indication.
     * @param value value to set the INDICATION
     */
    public void setIndication(String value) {
        setAttributeInternal(INDICATION, value);
    }

    /**
     * Gets the attribute value for REFERENCES using the alias name References.
     * @return the REFERENCES
     */
    public String getReferences() {
        return (String)getAttributeInternal(REFERENCES);
    }

    /**
     * Sets <code>value</code> as attribute value for REFERENCES using the alias name References.
     * @param value value to set the REFERENCES
     */
    public void setReferences(String value) {
        setAttributeInternal(REFERENCES, value);
    }

    /**
     * Gets the attribute value for CREATE_DATE using the alias name CreateDate.
     * @return the CREATE_DATE
     */
    public Date getCreateDate() {
        return (Date)getAttributeInternal(CREATEDATE);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link TPPProfileCategoryView.
     */
    public RowIterator getTPPProfileCategoryView() {
        return (RowIterator)getAttributeInternal(TPPPROFILECATEGORYVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    
    public void createTppVersion(String name, Date appDate, String description) {
        
        String date = null;
        if (appDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
            date = dateFormat.format(appDate);
        }
        
        runStatement("begin tpp_pkg.create_tpp_version(?,?,?,?); end;", true, 
                     this.getProjectId(), name, date, description);
        
        refresh();
    }
    
    public void copyTppVersionToCurrent() {
             
        runStatement("begin tpp_pkg.copy_version_to_current(?); end;", true, 
                     this.getId().toString());
    }
    
    public String retrieveExportURL(String projectId,  String version) {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        String url = null;
        
        pstmt = this.getDBTransaction().createPreparedStatement("select tpp_pkg.get_pdf_export(?,?) as result from dual", 1);
        try {
            pstmt.setString(1, projectId);
            pstmt.setString(2, version);
            
            rs = pstmt.executeQuery();
            while (rs.next()) {
                url = rs.getString(1);
            }
        } catch (SQLException sqle) {
            throw new JboException (sqle);
        }
        finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
            } catch (SQLException sqle) {
                //do nothing, ignore
            }
        }
        
        return url;
        
    }
    
}

