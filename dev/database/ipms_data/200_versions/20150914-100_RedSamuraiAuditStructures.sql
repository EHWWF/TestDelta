REM script.sql

DROP SEQUENCE "REDSAM_AUDIT_MSG_SEQ";
DROP TABLE "REDSAM_AUDIT_MSG";
DROP TABLE "REDSAM_AUDIT_PARAMS";



  CREATE SEQUENCE "REDSAM_AUDIT_MSG_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 64 NOCACHE NOORDER NOCYCLE ;
  
  CREATE TABLE "REDSAM_AUDIT_MSG"
    (
      "REDSAM_AUDIT_MSG_ID" NUMBER,
      "MSG_TYPE"            VARCHAR2(20 BYTE),
      "TIME_ELAPSED"        NUMBER,
      "MSG_DETAIL"          VARCHAR2(3500 BYTE),
      "MSG_DATE" TIMESTAMP (6) NOT NULL ENABLE,
      "COMPONENT" VARCHAR2(300 BYTE),
      "USERNAME" VARCHAR2(200 BYTE), 
      "STACK_TRACE" CLOB , 
      CONSTRAINT "REDSAM_AUDIT_MSG_REDSAM_AUD" CHECK ("REDSAM_AUDIT_MSG_ID" IS NOT NULL) ENABLE,
      CONSTRAINT "REDSAMAUDITMSGEO_PRIMARY_KEY" PRIMARY KEY ("REDSAM_AUDIT_MSG_ID")
    );
    
  CREATE TABLE "REDSAM_AUDIT_PARAMS"
    (
      "ID"  NUMBER NOT NULL ENABLE,
      "TET" NUMBER,
      "TFS" NUMBER,
      "TAT" NUMBER,
      CONSTRAINT "REDSAM_AUDIT_PARAMS_PK" PRIMARY KEY ("ID") ENABLE
  );
    
CREATE OR REPLACE TRIGGER "INSERT_REDSAM_AUDIT_MSG_SEQ" BEFORE
  INSERT ON REDSAM_AUDIT_MSG FOR EACH ROW WHEN (new.REDSAM_AUDIT_MSG_ID IS NULL) BEGIN
  SELECT REDSAM_AUDIT_MSG_SEQ.NEXTVAL INTO :new.REDSAM_AUDIT_MSG_ID FROM dual;
END;
/
ALTER TRIGGER "INSERT_REDSAM_AUDIT_MSG_SEQ" ENABLE;

INSERT INTO REDSAM_AUDIT_PARAMS VALUES (1, 10000, 300, 3000);
COMMIT;

REM script_upgrade.sql

ALTER TABLE REDSAM_AUDIT_MSG  MODIFY MSG_DETAIL VARCHAR2(3500);
ALTER TABLE REDSAM_AUDIT_PARAMS   ADD (SI NUMBER );
UPDATE REDSAM_AUDIT_PARAMS set SI = 600;

DROP SEQUENCE "REDSAM_AUDIT_STATS_SEQ";
DROP TABLE "REDSAM_AUDIT_STATS";
CREATE SEQUENCE "REDSAM_AUDIT_STATS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 64 NOCACHE NOORDER NOCYCLE ;

CREATE TABLE "REDSAM_AUDIT_STATS" 
   (	"REDSAM_AUDIT_STATS_ID" NUMBER NOT NULL ENABLE, 
	"STATS_DATE" DATE NOT NULL ENABLE, 
	"SELECTS_NO" NUMBER, 
	"UPDATES_NO" NUMBER, 
	"INSERTS_NO" NUMBER, 
	"DELETES_NO" NUMBER, 
	"ACTIVATIONS_NO" NUMBER, 
	"APPMODULES_NO" NUMBER, 
	"APPMODULE_NAME" VARCHAR2(400 BYTE), 
	 CONSTRAINT "REDSAM_AUDIT_STATS_PK" PRIMARY KEY ("REDSAM_AUDIT_STATS_ID"));



  
  CREATE OR REPLACE TRIGGER "INSERT_REDSAM_AUDIT_STATS_SEQ" BEFORE
  INSERT ON REDSAM_AUDIT_STATS FOR EACH ROW  WHEN (new.REDSAM_AUDIT_STATS_ID IS NULL) BEGIN
  SELECT REDSAM_AUDIT_STATS_SEQ.NEXTVAL INTO :new.REDSAM_AUDIT_STATS_ID FROM dual;
END;
/
ALTER TRIGGER "INSERT_REDSAM_AUDIT_STATS_SEQ" ENABLE;




DROP SEQUENCE "REDSAM_AUDIT_SESS_SEQ";
DROP TABLE "REDSAM_AUDIT_SESSIONS";
CREATE SEQUENCE "REDSAM_AUDIT_SESS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 67 NOCACHE NOORDER NOCYCLE ;

  CREATE TABLE REDSAM_AUDIT_SESSIONS
   (	"REDSAM_AUDIT_SESSIONS_ID" NUMBER NOT NULL ENABLE, 
	"SESSION_ID" VARCHAR2(300 BYTE) NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(300 BYTE) NOT NULL ENABLE, 
	"LOGOUT_AT" DATE NOT NULL ENABLE, 
	"LOGIN_AT" DATE NOT NULL ENABLE, 
	 CONSTRAINT "REDSAM_AUDIT_USER_SESSION_PK" PRIMARY KEY ("REDSAM_AUDIT_SESSIONS_ID"));

CREATE OR REPLACE TRIGGER "INS_REDSAM_AUDIT_SESSIONS_SEQ" BEFORE  INSERT ON "REDSAM_AUDIT_SESSIONS"
FOR EACH ROW  WHEN (new.REDSAM_AUDIT_SESSIONS_ID IS NULL) 
BEGIN  SELECT REDSAM_AUDIT_SESS_SEQ.NEXTVAL INTO :new.REDSAM_AUDIT_SESSIONS_ID FROM dual;
END;
/
ALTER TRIGGER "INS_REDSAM_AUDIT_SESSIONS_SEQ" ENABLE;

CREATE OR REPLACE PROCEDURE REDSAM_DELETE_MSG AS 
BEGIN
  DELETE FROM REDSAM_AUDIT_MSG;
  COMMIT;
END REDSAM_DELETE_MSG;
/

REM script_upgrade2.sql

CREATE OR REPLACE FUNCTION REDSAM_USER_HOURS_PER_DAY(LOGIN_DATE IN VARCHAR2 ) RETURN NUMBER AS USER_HOURS NUMBER;
BEGIN
  SELECT COUNT(*) INTO USER_HOURS FROM
  (SELECT DISTINCT TO_CHAR(login_at, 'YYYY-MM-DD HH24') session_date
  FROM redsam_audit_sessions
  WHERE TO_CHAR(login_at, 'YYYY-MM-DD') = LOGIN_DATE);
  RETURN USER_HOURS;
END REDSAM_USER_HOURS_PER_DAY;
/

CREATE OR REPLACE
FUNCTION REDSAM_LATEST_FETCH_ISSUES(VO_NAME IN VARCHAR2, AM_NAME IN VARCHAR2, START_DATE IN TIMESTAMP) RETURN NUMBER AS ISSUES_NO NUMBER;
BEGIN
  SELECT COUNT(*) INTO ISSUES_NO FROM REDSAM_AUDIT_MSG WHERE MSG_TYPE = 'Large fetch' 
    AND SUBSTR(COMPONENT, (INSTR(COMPONENT, '.') - 1) + 2) = VO_NAME
    AND SUBSTR(COMPONENT, 0, INSTR(COMPONENT, '.', -1) - 1) = AM_NAME
    AND MSG_DATE > START_DATE;
  RETURN ISSUES_NO;
END REDSAM_LATEST_FETCH_ISSUES;
/

CREATE OR REPLACE
FUNCTION REDSAM_LATEST_QUERY_ISSUES(VO_NAME IN VARCHAR2, AM_NAME IN VARCHAR2, START_DATE IN TIMESTAMP) RETURN NUMBER AS ISSUES_NO NUMBER;
BEGIN
  SELECT COUNT(*) INTO ISSUES_NO FROM REDSAM_AUDIT_MSG WHERE MSG_TYPE = 'Slow query' 
    AND SUBSTR(COMPONENT, (INSTR(COMPONENT, '.') - 1) + 2) = VO_NAME
    AND SUBSTR(COMPONENT, 0, INSTR(COMPONENT, '.', -1) - 1) = AM_NAME
    AND MSG_DATE > START_DATE;
  RETURN ISSUES_NO;
END REDSAM_LATEST_QUERY_ISSUES;
/

REM script_upgrade3.sql

ALTER TABLE REDSAM_AUDIT_PARAMS ADD (WAT NUMBER);
ALTER TABLE REDSAM_AUDIT_PARAMS ADD (WFT NUMBER);
UPDATE REDSAM_AUDIT_PARAMS set WAT = 10000;
UPDATE REDSAM_AUDIT_PARAMS set WFT = 5000;

COMMIT;

REM script_upgrade4.sql

ALTER TABLE REDSAM_AUDIT_MSG ADD (SERVER_NAME VARCHAR(50));
ALTER TABLE REDSAM_AUDIT_MSG ADD (SERVER_PORT NUMBER);
CREATE INDEX REDSAM_AUDIT_SERVER_NAME_INDEX ON REDSAM_AUDIT_MSG (SERVER_NAME);
CREATE INDEX REDSAM_AUDIT_SERVER_PORT_INDEX ON REDSAM_AUDIT_MSG (SERVER_PORT);

ALTER TABLE REDSAM_AUDIT_STATS ADD (SERVER_NAME VARCHAR(50));
ALTER TABLE REDSAM_AUDIT_STATS ADD (SERVER_PORT NUMBER);
CREATE INDEX REDSAM_AUDIT_ST_SERV_NAME_IND ON REDSAM_AUDIT_STATS (SERVER_NAME);
CREATE INDEX REDSAM_AUDIT_ST_SERV_PORT_IND ON REDSAM_AUDIT_STATS (SERVER_PORT);

ALTER TABLE REDSAM_AUDIT_SESSIONS ADD (SERVER_NAME VARCHAR(50));
ALTER TABLE REDSAM_AUDIT_SESSIONS ADD (SERVER_PORT NUMBER);
CREATE INDEX REDSAM_AUDIT_SE_SERV_NAME_IND ON REDSAM_AUDIT_SESSIONS (SERVER_NAME);
CREATE INDEX REDSAM_AUDIT_SE_SERV_PORT_IND ON REDSAM_AUDIT_SESSIONS (SERVER_PORT);

CREATE TABLE REDSAM_AUDIT_SERVERS 
   (	SERVER_NAME VARCHAR2(50 BYTE), 
	SERVER_PORT NUMBER, 
	 CONSTRAINT "REDSAM_AUDIT_SERVERS_PK" PRIMARY KEY (SERVER_NAME, SERVER_PORT));

CREATE TABLE REDSAM_AUDIT_DS 
   (	ID NUMBER, 
	DS_NAME VARCHAR2(50), 
	 CONSTRAINT "REDSAM_AUDIT_DS_PK" PRIMARY KEY (ID));

INSERT INTO REDSAM_AUDIT_DS (ID, DS_NAME) VALUES (1, 'jdbc/RedsamAuditDS');


REM script_upgrade5.sql

DROP TABLE "REDSAM_AUDIT_TF";
DROP SEQUENCE "REDSAM_AUDIT_TF_SEQ";

CREATE TABLE "REDSAM_AUDIT_TF"
  (
    "REDSAM_AUDIT_TF_ID" NUMBER NOT NULL ENABLE,
    "TF_NAME"            VARCHAR2(150 BYTE) NOT NULL ENABLE,
    "APP_NAME"           VARCHAR2(100 BYTE) NOT NULL ENABLE,
    "SERVER_NAME"        VARCHAR2(100 BYTE) NOT NULL ENABLE,
    "ACTIVE"             NUMBER,
    "ACCESSED"           NUMBER,
    "MAXACTIVE"          NUMBER,
    "AVGTIME"            NUMBER,
    "SERVER_PORT"        VARCHAR2(10 BYTE),
    "STATS_DATE"         DATE NOT NULL ENABLE,
    CONSTRAINT "REDSAM_AUDIT_TF_PK" PRIMARY KEY ("REDSAM_AUDIT_TF_ID") 
  );

CREATE SEQUENCE "REDSAM_AUDIT_TF_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 64 NOCACHE NOORDER NOCYCLE;


create or replace
TRIGGER "INSERT_REDSAM_AUDIT_TF_SEQ" BEFORE
  INSERT ON REDSAM_AUDIT_TF FOR EACH ROW WHEN (new.REDSAM_AUDIT_TF_ID IS NULL) BEGIN
  SELECT REDSAM_AUDIT_TF_SEQ.NEXTVAL INTO :new.REDSAM_AUDIT_TF_ID FROM dual;
END;
/

REM script_upgrade6.sql

DROP TRIGGER  "INS_REDSAM_AUDIT_CLIENT_SEQ";
DROP TRIGGER  "INS_REDSAM_AUDIT_QUERIES_SEQ";

DROP TABLE "REDSAM_AUDIT_CLIENT_REQUESTS";
DROP TABLE "REDSAM_AUDIT_QUERIES";
DROP SEQUENCE "REDSAM_AUDIT_CLIENT_REQ_SEQ";
DROP SEQUENCE "REDSAM_AUDIT_QUERIES_SEQ";

  
CREATE TABLE "REDSAM_AUDIT_CLIENT_REQUESTS" 
   (	"CLIENT_REQUESTS_ID" NUMBER, 
	"COMPONENT_ID" VARCHAR2(250 BYTE), 
	"COMPONENT_NAME" VARCHAR2(100 BYTE),
	"SECTION" VARCHAR2(200 BYTE), 
	"SUBSECTION" VARCHAR2(500 BYTE), 
	"ECID" VARCHAR2(250 BYTE), 
	"LOAD_TIME" NUMBER, 
	"USER_NAME" VARCHAR2(200 BYTE), 
	"PAGE_LOAD_TIME" NUMBER, 
	"PAGE_NAME" VARCHAR2(250 BYTE), 
	"REQUEST_DATE" TIMESTAMP (6), 
	"SERVER_NAME" VARCHAR2(50 BYTE), 
	"SERVER_PORT" NUMBER, 
	CONSTRAINT "REDSAM_AUDIT_CLIENT_REQUES_PK" PRIMARY KEY ("CLIENT_REQUESTS_ID") 
   ) ;

CREATE TABLE "REDSAM_AUDIT_QUERIES" 
   (	"AUDIT_QUERIES_ID" NUMBER, 
	"VO_NAME" VARCHAR2(255 BYTE), 
	"BINDVARS" VARCHAR2(255 BYTE), 
	"ECID" VARCHAR2(250 BYTE), 
	"SERVER_NAME" VARCHAR2(50 BYTE), 
	"SERVER_PORT" VARCHAR2(10 BYTE), 
	"USER_NAME" VARCHAR2(100 BYTE), 
	"REQUEST_DATE" TIMESTAMP (6), 
	"SESSION_ID" VARCHAR2(200 BYTE),
	CONSTRAINT "REDSAM_AUDIT_QUERIES_PK" PRIMARY KEY ("AUDIT_QUERIES_ID") 
   );
  
  

CREATE SEQUENCE "REDSAM_AUDIT_CLIENT_REQ_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE NOORDER NOCYCLE;
CREATE SEQUENCE "REDSAM_AUDIT_QUERIES_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE NOORDER NOCYCLE;


create or replace
TRIGGER "INS_REDSAM_AUDIT_QUERIES_SEQ" BEFORE
  INSERT ON REDSAM_AUDIT_QUERIES FOR EACH ROW WHEN (new.AUDIT_QUERIES_ID IS NULL) BEGIN
  SELECT REDSAM_AUDIT_QUERIES_SEQ.NEXTVAL INTO :new.AUDIT_QUERIES_ID FROM dual;
END;
/

create or replace
TRIGGER "INS_REDSAM_AUDIT_CLIENT_SEQ" BEFORE
  INSERT ON REDSAM_AUDIT_CLIENT_REQUESTS FOR EACH ROW WHEN (new.CLIENT_REQUESTS_ID IS NULL) BEGIN
  SELECT REDSAM_AUDIT_CLIENT_REQ_SEQ.NEXTVAL INTO :new.CLIENT_REQUESTS_ID FROM dual;
END;
/

CREATE OR REPLACE FUNCTION REDSAM_DUPL_QUER_PER_MOD(MODULE IN VARCHAR2) RETURN NUMBER AS DUPL_PER_MODULE NUMBER;
BEGIN
  SELECT SUM(queries_count) INTO DUPL_PER_MODULE FROM   
  (SELECT DISTINCT COUNT(*) queries_count,   
    vo_name,   
    bindvars   
  FROM redsam_audit_queries
  WHERE substr(vo_name, 0, instr(vo_name, '.', -1) - 1) = MODULE
  GROUP BY ecid,   
    vo_name,   
    bindvars   
  ) WHERE queries_count > 1;
  RETURN DUPL_PER_MODULE;
END REDSAM_DUPL_QUER_PER_MOD;
/

CREATE OR REPLACE FUNCTION REDSAM_ALL_QUER_PER_MOD(MODULE IN VARCHAR2) RETURN NUMBER AS ALL_PER_MODULE NUMBER;
BEGIN
  SELECT SUM(vo_occur_count) INTO ALL_PER_MODULE FROM
  (SELECT COUNT(*) AS vo_occur_count,
    vo_name
  FROM redsam_audit_queries
  WHERE SUBSTR(vo_name, 0, instr(vo_name, '.', -1) - 1) = MODULE
  GROUP BY vo_name, bindvars
  );
  RETURN ALL_PER_MODULE;
END REDSAM_ALL_QUER_PER_MOD;
/