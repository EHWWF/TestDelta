<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:ns4="http://xmlns.oracle.com/Primavera/P6/WS/WBS/V2"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:ns2="http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:ns3="http://xmlns.oracle.com/Primavera/P6/WS/Activity/V1"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:ns0="http://xmlns.bayer.com/ipms/soa" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                exclude-result-prefixes="xsi oracle-xsl-mapper xsl xsd ns4 ns2 ns3 ns0 xp20 oraxsl mhdr oraext dvm xref socket"
                xmlns:intgfault="http://xmlns.oracle.com/Primavera/P6/WS/IntegrationFaultType/V1"
                xmlns:ns1="http://xmlns.bayer.com/ipms/cache" xmlns:ns6="http://xmlns.bayer.com/ipms/qplan"
                xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype" xmlns:ns5="http://xmlns.bayer.com/ipms"
                xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                xmlns:tns="http://xmlns.oracle.com/Primavera/P6/WS/ActivityCodeAssignment/V1">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/ReadBaseline.wsdl"/>
        <oracle-xsl-mapper:rootElement name="config" namespace="http://xmlns.bayer.com/ipms/soa"/>
      </oracle-xsl-mapper:source>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/ReadBaseline.wsdl"/>
        <oracle-xsl-mapper:rootElement name="read" namespace="http://xmlns.bayer.com/ipms/soa"/>
        <oracle-xsl-mapper:param name="inputVariable.payload"/>
      </oracle-xsl-mapper:source>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="oramds:/apps/com/oracle/xmlns/Primavera/P6/WS/UDFValue/V1/UDFValueService.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ReadUDFValuesResponse"
                                       namespace="http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1"/>
        <oracle-xsl-mapper:param name="ReadAllUDFsOut.result"/>
      </oracle-xsl-mapper:source>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../wsdl/ActivityService.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ReadActivitiesResponse"
                                       namespace="http://xmlns.oracle.com/Primavera/P6/WS/Activity/V1"/>
        <oracle-xsl-mapper:param name="ReadAllActivitiesOut.result"/>
      </oracle-xsl-mapper:source>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../wsdl/WBSService.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ReadWBSResponse"
                                       namespace="http://xmlns.oracle.com/Primavera/P6/WS/WBS/V2"/>
        <oracle-xsl-mapper:param name="ReadWBSOut.result"/>
      </oracle-xsl-mapper:source>
       <oracle-xsl-mapper:source type="WSDL">
          <oracle-xsl-mapper:schema location="../wsdl/ActivityCodeAssignmentService.wsdl"/>
          <oracle-xsl-mapper:rootElement name="ReadActivityCodeAssignmentsResponse" namespace="http://xmlns.oracle.com/Primavera/P6/WS/ActivityCodeAssignment/V1"/>
          <oracle-xsl-mapper:param name="ReadMilestoneCodesOut.result"/>
       </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/ReadBaseline.wsdl"/>
        <oracle-xsl-mapper:rootElement name="response" namespace="http://xmlns.bayer.com/ipms/soa"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <!--GENERATED BY ORACLE XSL MAPPER 12.1.3.0.0(XSLT Build 140529.0700.0211) AT [WED APR 13 10:08:48 CEST 2016].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:param name="inputVariable.payload"/>
  <xsl:param name="ReadAllUDFsOut.result"/>
  <xsl:param name="ReadAllActivitiesOut.result"/>
  <xsl:param name="ReadWBSOut.result"/>
  <xsl:param name="ReadMilestoneCodesOut.result"/>
  <xsl:template match="/">
    <ns0:response id="{$inputVariable.payload/ns0:read/@id}">
      <ns0:complete id="{$inputVariable.payload/ns0:read/@id}">
        <ns5:baselines>
          <ns5:baseline id="{$inputVariable.payload/ns0:read/ns5:baseline/@id}">
            <ns5:wbsNodes>
              <xsl:for-each select="$ReadWBSOut.result/ns4:ReadWBSResponse/ns4:WBS">
                <xsl:choose>
                  <xsl:when test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:placeholderTypeId)]/ns2:Text = "true"'/>
                  <xsl:otherwise>
                    <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyIdTypeId)]/ns2:Text != ""'>
                      <ns5:wbs id="{ns4:ObjectId}"
                               studyId="{$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyIdTypeId)]/ns2:Text}">
                        <ns5:code>
                          <xsl:value-of select="ns4:Code"/>
                        </ns5:code>
                        <ns5:name>
                          <xsl:value-of select="ns4:Name"/>
                        </ns5:name>
                        <xsl:if test='ns4:StartDate and not((ns4:StartDate/@xsi:nil = "true"))'>
                          <ns5:startDate>
                            <xsl:value-of select="ns4:StartDate"/>
                          </ns5:startDate>
                        </xsl:if>
                        <xsl:if test='ns4:FinishDate and not((ns4:FinishDate/@xsi:nil = "true"))'>
                          <ns5:finishDate>
                            <xsl:value-of select="ns4:FinishDate"/>
                          </ns5:finishDate>
                        </xsl:if>
                        <xsl:if test='ns4:WBSCategoryObjectId !=""'>
                          <ns5:WBSCategoryObjectId>
                            <xsl:value-of select="ns4:WBSCategoryObjectId"/>
                          </ns5:WBSCategoryObjectId>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyPhaseTypeId)]/ns2:Text != ""'>
                          <ns5:studyPhase>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyPhaseTypeId)]/ns2:Text"/>
                          </ns5:studyPhase>
                        </xsl:if>
                        <xsl:if test='ns4:SequenceNumber and not((ns4:SequenceNumber/@xsi:nil = "true"))'>
                          <ns5:sequenceNumber>
                            <xsl:value-of select="ns4:SequenceNumber"/>
                          </ns5:sequenceNumber>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:planPatientsTypeId)]/ns2:Text != ""'>
                          <ns5:planPatients>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:planPatientsTypeId)]/ns2:Text"/>
                          </ns5:planPatients>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:actualPatientsTypeId)]/ns2:Text != ""'>
                          <ns5:actualPatients>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:actualPatientsTypeId)]/ns2:Text"/>
                          </ns5:actualPatients>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:planEnteredScreenTypeId)]/ns2:Text != ""'>
                          <ns5:planEnteredScreen>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:planEnteredScreenTypeId)]/ns2:Text"/>
                          </ns5:planEnteredScreen>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:actEnteredScreenTypeId)]/ns2:Text != ""'>
                          <ns5:actEnteredScreen>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:actEnteredScreenTypeId)]/ns2:Text"/>
                          </ns5:actEnteredScreen>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyCountryCountPlanTypeId)]/ns2:Text != ""'>
                          <ns5:studyCountryCountPlan>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyCountryCountPlanTypeId)]/ns2:Text"/>
                          </ns5:studyCountryCountPlan>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyCountryCountTypeId)]/ns2:Text != ""'>
                          <ns5:studyCountryCount>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyCountryCountTypeId)]/ns2:Text"/>
                          </ns5:studyCountryCount>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyUnitCountTypeId)]/ns2:Text != ""'>
                          <ns5:studyUnitCount>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyUnitCountTypeId)]/ns2:Text"/>
                          </ns5:studyUnitCount>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyUnitCountPlanTypeId)]/ns2:Text != ""'>
                          <ns5:studyUnitCountPlan>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:studyUnitCountPlanTypeId)]/ns2:Text"/>
                          </ns5:studyUnitCountPlan>
                        </xsl:if>
                        <xsl:if test='$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:FTEAvgTypeId)]/ns2:Text != ""'>
                          <ns5:FTEAvg>
                            <xsl:value-of select="$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns4:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:wbs/ns0:FTEAvgTypeId)]/ns2:Text"/>
                          </ns5:FTEAvg>
                        </xsl:if>
                      </ns5:wbs>
                    </xsl:if>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:for-each>
            </ns5:wbsNodes>
            <ns5:activities>
              <xsl:for-each select="$ReadAllActivitiesOut.result/ns3:ReadActivitiesResponse/ns3:Activity">
                <xsl:if test='($ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns3:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:activity/ns0:studyElementIdTypeId)]/ns2:Text != "") or ($ReadMilestoneCodesOut.result/tns:ReadActivityCodeAssignmentsResponse/tns:ActivityCodeAssignment[tns:ActivityObjectId=current()/ns3:ObjectId]/tns:ActivityCodeValue != "")'>
                  <ns5:activity id="{ns3:ObjectId}"
                                studyElementId="{$ReadAllUDFsOut.result/ns2:ReadUDFValuesResponse/ns2:UDFValue[(ns2:ForeignObjectId=current()/ns3:ObjectId) and (ns2:UDFTypeObjectId=/ns0:config/ns0:activity/ns0:studyElementIdTypeId)]/ns2:Text}">
                    <xsl:if test='not(ns3:WBSObjectId/@xsi:nil = "true")'>
                      <xsl:attribute name="wbsId">
                        <xsl:value-of select="ns3:WBSObjectId"/>
                      </xsl:attribute>
                    </xsl:if>
                    <ns5:code>
                      <xsl:value-of select="ns3:Id"/>
                    </ns5:code>
                    <ns5:name>
                      <xsl:value-of select="ns3:Name"/>
                    </ns5:name>
                    <xsl:if test="ns3:Type">
                      <ns5:type>
                        <xsl:value-of select="ns3:Type"/>
                      </ns5:type>
                    </xsl:if>
                    <ns5:planStart>
                      <xsl:value-of select="ns3:PlannedStartDate"/>
                    </ns5:planStart>
                    <ns5:planFinish>
                      <xsl:value-of select="ns3:PlannedFinishDate"/>
                    </ns5:planFinish>
                    <xsl:if test='ns3:ActualStartDate and not(ns3:ActualStartDate/@xsi:nil = "true")'>
                      <ns5:actualStart>
                        <xsl:value-of select="ns3:ActualStartDate"/>
                      </ns5:actualStart>
                    </xsl:if>
                    <xsl:if test='ns3:ActualFinishDate and not(ns3:ActualFinishDate/@xsi:nil = "true")'>
                      <ns5:actualFinish>
                        <xsl:value-of select="ns3:ActualFinishDate"/>
                      </ns5:actualFinish>
                    </xsl:if>
                    <ns5:milestoneCode>
                      <xsl:value-of select="$ReadMilestoneCodesOut.result/tns:ReadActivityCodeAssignmentsResponse/tns:ActivityCodeAssignment[tns:ActivityObjectId=current()/ns3:ObjectId]/tns:ActivityCodeValue"/>
                    </ns5:milestoneCode>
                  </ns5:activity>
                </xsl:if>
              </xsl:for-each>
            </ns5:activities>
          </ns5:baseline>
        </ns5:baselines>
      </ns0:complete>
    </ns0:response>
  </xsl:template>
</xsl:stylesheet>
